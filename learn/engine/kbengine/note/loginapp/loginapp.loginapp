问题：Loginapp类设计说明？
试答：基类接口的重载和特定网络接口的实现。
说明：loginapp.h


问题：TimeOutType枚举说明？
试答：TimeOutType枚举定义在类内部，但以上一个基类定义的枚举最大值加一为开始，比如，Loginapp的
	  枚举TIMEOUT_TICK是以基类PythonApp的枚举最大值（TIMEOUT_PYTHONAPP_MAX）加一开始的。
	  
	  因为不同定时器可以挂同一个对象来处理过期逻辑，所以在同一个对象内需要不同的TimeOutType类型
	  来区分handleTimeout是哪个定时器触发的。
	  
	  Loginapp中过期类型为TIMEOUT_TICK的定时器是在initializeEnd()函数中加入的。
	  
	  枚举作用域说明：在枚举类型中定义的常量，属于定义枚举的作用域，而不属于这个枚举类型。
说明：loginapp.h(46), loginapp.cpp(164)


问题：Loginapp构造函数说明？
试答：因为实现了构造函数，但没有提供默认构造函数，所以Loginapp的构造必须要求四个参数：
	  1，事件派发器；
	  2，网络接口；
	  3，组件类型；
	  4，组件索引；
	  
	  其他类成员的构造要么调用基于以上四个参数的构造函数，要么调用默认构造函数。
说明：loginapp.cpp(50)


问题：Loginapp析构函数说明？
试答：对资源释放：
	  1，其他的成员走自己的析构函数；
	  2，pHttpCBHandler的释放；
	  3，pTelnetServer_不知道为啥没释放，finalise()函数里面也没有。？？？
说明：loginapp.cpp(66)


问题：run()函数说明？
试答：调用父类（PythonApp类）接口，再调用父类（ServerApp类）接口，
	  最终调用EventDispatcher::processUntilBreak()。
说明：loginapp.cpp(88)


问题：onChannelDeregister(...)函数说明？
试答：该函数是基类ChannelDeregisterHandler的接口；
	  
	  在Loginapp类的父类ServerApp类构造的时候，会把拥有这个接口的this指针赋值给
	  NetworkInterface类成员pChannelDeregisterHandler_;
	  
	  当某个管道断开连接的时候，会调用NetworkInterface类deregisterChannel()函数，
	  其又会调用onChannelDeregister()函数;
	  
	  onChannelDeregister()函数首先处理外部的管道，然后处理内部的管道；
		
	  对于外部管道，其实就是客户端连接，客户端因为外力环境断开网络、登录服连接完毕主动
	  关闭、连接过期等都会触发这个回调；
	  
	  当这个管道中有格外数据时，会发送一个包给dbmgr组件，通知它从队列中清除相关信息，其实
	  这个格外信息就是登陆账号或创建账号的信息。
	  
	  对于内部管道，其实就是各组件连接，需要从组件管理器里面移除掉。
说明：loginapp.cpp(118), serverapp.cpp(79,298), network_interface.cpp(381)
	  
	  
问题：handleTimeout()函数说明？
试答：在启动loginapp组件的initialize阶段中，分阶段initializeEnd会加入一个每秒定时器，并把自己
	  作为处理器（因为派生于TimerHandler）与该定时器关联，设置类型为TIMEOUT_TICK，这样当定时器
	  过期时就会调用处理器（Loginapp类）的接口函数handleTimeout()。
	  
	  在handleTimeout()函数中，首先调用基类的handleTimeout()处理相关的事务；在arg参数为TIMEOUT_TICK
	  时，调用handleMainTick()处理相关业务。
说明：loginapp.cpp(94,163)	


问题：handleMainTick()函数说明？  
试答：Loginapp类主心跳，处理的事务有：
	  1，线程池相关；
	  2，网络消息相关；
	  3，登录列表相关；
	  4，创建列表相关；
说明：loginapp.cpp(109)


问题：initializeBegin()函数说明？
试答：不处理事务，return true。
说明：loginapp.cpp(151)


问题：inInitialize()函数说明？
试答：调用父类PythonApp的inInitialize()。
说明：loginapp.cpp(157)


问题：initializeEnd()函数说明？
试答：1，调用父类PythonApp的inInitialize()；
	  2，调用脚本接口onLoginAppReady；
	  3，调用脚本接口onLoginAppPostAddr；
	  4，创建TelnetServer。
说明：loginapp.cpp(163)


问题：finalise()函数说明？
试答：1，取消之前加入的定时器；
	  2，调用父类PythonApp的finalise()。
说明：loginapp.cpp(228)


问题：onInstallPyModules()函数说明？
试答：父类PythonApp的接口，这里实现了重载，给脚本模块加入服务器错误码枚举。
	  在PythonApp类的installPyModules()的时候会调用onInstallPyModules()。
说明：loginapp.cpp(214)


问题：onShutdownBegin()函数说明？
试答：调用父类PythonApp的onShutdownBegin()，通知脚本onLoginAppShutDown装备关服。
说明：loginapp.cpp(72)


问题：onShutdownEnd()函数说明？
试答：调用父类PythonApp的onShutdownEnd()
说明：loginapp.cpp(82)


问题：onHello()函数说明？
试答：发送引擎版本号、脚本版本号、消息协议Md5、实体Md5、组件类型给客户端；
	  用客户端发送上来的密钥（encryptedKey）加密通讯管道。
	  
	  扩展知识：加密相关知识。
说明：loginapp.cpp(1336)


问题：onClientActiveTick()函数说明？
试答：客户端每隔几秒（1.0.0插件上是15秒）跟服务端通讯，确认客户端还处于活跃状态；
	  服务端收到信息包时，会更新管道的过期时间，并会发一个包给客户端。
说明：loginapp.cpp(264)


问题：reqCreateAccount()函数说明?
试答：客户端请求创建游戏账号接口。
说明：loginapp.cpp(538)
	  
	 
问题：_createAccount()函数说明？
试答：创建账号的逻辑处理，具体分析如下：
	  1，确认是否开放了账号注册功能，如果没有开放那就不能创建账号；
	  2，对账号和密码进行修剪，去掉前后的空格；
	  3，对账号、密码和附加信息的长度进行验证；
	  4，如果服务器正在关闭中，则不能创建账号；
	  5，如果创建的账号已经在缓存中，则不能创建账号；
	  6，脚本处理创建账号请求；
	  7，创建账号类型识别，如果是邮件注册要求是否邮件地址正确，如果是普通注册要求用户名是否正确；
	  8，缓存创建账号的信息；
	  9，获取dbmgr管道，如果管道无效，则不能创建账号；
	  10，缓存格外信息extra到客户端的管道中，这个信息用来处理客户端断开连接时，是否通知dbmgr清除相关信息；
	  11，将信息提交给dbmgr继续处理后续流程。
说明：loginapp.cpp(277)


问题：reqCreateMailAccount()函数说明?
试答：与reqCreateAccount()函数功能相同，只不过ACCOUNT_TYPE类型是ACCOUNT_TYPE_MAIL。
说明：loginapp.cpp(538)


问题：onReqCreateAccountResult()函数说明？
试答：dbmgr创建账号流程完毕的回调。
	  主要是根据实际业务的需求，在脚本处理完逻辑之后，通知客户端创建账号结果。
说明：loginapp.cpp(565)


问题：onReqCreateMailAccountResult()函数说明？
试答：基本上同上，多了一步邮件激活的过程。
	  todo：邮件激活过程说明带完善。
说明：loginapp.cpp(616)