问题：NetworkInterface类设计说明？
试答：NetworkInterface类负责组件的网络通信的管理，他包含了两个连接终点：
	  外部连接终端和内部连接终端，两个终端信息接收器：外部终端信息接收器和内部终端信息接收器，
	  同时维护着一份通信列表。
	  每个组件启动的时候，会根据组件的配置，创建一个NetwoInterface对象，
	  依次创建两个终端，和对应的两个信息接收器，并将两者关联起来（epoll注册）。
	  派生于TimerHandler，但处理函数目前没有具体逻辑，可以认为暂时没有应用。
说明：network_interface.h


问题：NetworkInterface类构造函数？
试答：成员变量的初始化，外部和内部终端的建立，负责外部和内部终端接收器的创建。
	  关联终端和对应的信息接收器。
	  初始化延迟频道管理器pDelayedChannels_。
说明：network_interface.cpp(25)


问题：NetworkInterface类析构函数？
试答：释放通信信息，关闭socket，释放各种资源。
说明：network_interface.cpp(88)


问题：NetworkInterface类extTcpAddr()？
试答：获取对外的tcp地址，是一个Address类结构，NetworkInterface::initialize()函数中会对这个结构赋值。
说明：network_interface.h(40)


问题：NetworkInterface类extUdpAddr()？
试答：获取对外的udp地址，是一个Address类结构，NetworkInterface::initialize()函数中会对这个结构赋值。
说明：network_interface.h(41)


问题：NetworkInterface类intTcpAddr()？
试答：获取对内的tcp地址，是一个Address类结构，NetworkInterface::initialize()函数中会对这个结构赋值。
说明：network_interface.h(41)


问题：NetworkInterface类initialize()？
试答：参数是监听终端的类型（tcp/udp）名称，监听的最小端口最大端口，监听的地址，监听终端，监听信息接收器，
	  可读缓存，可写缓存。
	  如果终端已经建立了，那么先释放，这里做了重复利用资源的事情；
	  创建socket类型，并且将它的文件描述符的监听接收器与函数传来的监听接收器关联；
	  如果端口上限和下限一样，则设置端口重用，防止意外情况这个端口没有被释放，导致无法绑定；
	  --可以对一个端口进行多次绑定，一般这个是不支持使用的；对于监听套接字，比较特殊。
	  --如果你定义了SO_REUSEADDR，并且让两个套接字在同一个端口上进行接听，那么对于由谁来ACCEPT，
	  --就会出现歧义。如果你定义个SO_REUSEADDR，只定义一个套接字在一个端口上进行监听，
	  --如果服务器出现意外而导致没有将这个端口释放，那么服务器重新启动后，你还可以用这个端口，
	  --因为你已经规定可以重用了，如果你没定义的话，你就会得到提示，ADDR已在使用中。 	  
	  验证网络地址是否可以使用；
	  查找端口并且绑定，绑定不成功进程退出；
	  获取绑定的地址，如果地址ip为0，就获取默认的地址，失败退出；
	  监听不阻塞，不延迟；
	  设置读写缓存大小；
	  如果是tcp则调用listen接口。	  
	  
	  #todo需要继续深究。

说明：network_interface.h(44)


问题：NetworkInterface类registerChannel()？
试答：频道注册接口，先查找是否存在，没有则添加到channelMap_容器中，如果是外部的频道则外部频道数加一，
	  如果已经有了则断言报错。
	  
	  注册的几种情况：
	  1，连接
	  2，被连接
	  
	  注册的具体过程：
	  组件的EventDispatcher类的processNetwork()会定时监听网卡上的socket事件，然后提交给相应的handler处理。	  
	  NetworkInterface类在构造的时候，就把相关的socket（EndPoint类对象extEndpoint_，intEndpoint_）和
	  handler（ListenerReceiver类对象pExtListenerReceiver_，pIntListenerReceiver_）关联了起来。	  
	  当有连接进来的时候，ListenerReceiver类的handleInputNotification()就会处理通道的建立。	  
说明：network_interface.cpp(345)，event_dispatcher.cpp(188), poller_epoll.cpp(107), event_poller.cpp(93), listener_receiver.cpp(54)


问题：NetworkInterface类deregisterChannel()？
试答：频道注销接口，从频道容器中移除容器，如果移除失败则断言报错，如果移除成功则调用注销回调相关接口
	  处理注销业务。
	  注销的几种情况：
	  1，通道超时，最后一次通信时间超过配置时间（60.0s）则被认定为超时通道，服务器将踢出该通道；
	  2，当通道变的不合法的时候；
	  3，收到协议包出错的时候；	  
说明：serverapp.cpp(305),network_interface.cpp(3),tcp_packet_receiver.cpp(131),udp_packet_receiver.cpp(135)


问题：NetworkInterface类deregisterAllChannels()？
试答：注销所有频道，注销回调也不处理。目前只再guiconsoleDlg中使用。  
说明：network_interface.cpp(370)


问题：NetworkInterface类findChannel()？
试答：查找频道接口，提供了两个重载函数，一是，通过地址；二是，通过文件描述符。
说明：network_interface.cpp(321，332)


问题：NetworkInterface类pChannelTimeOutHandler()？
试答：设置或返回频道超时处理句柄，在ServerApp类的构造函数中设置，用来处理当前服务器进程的频道超时的逻辑。
	  
	  每个Channel创建的时候，会相应的创建一个定时器,用来检测频道是否过期，如果频道过期，会调用NetworkInterface类
	  的onChannelTimeOut()函数，该函数内部主要是调用ServerApp类的onChannelTimeOut()函数，这个函数最终又会调用
	  NetworkInterface类的deregisterChannel()来注销频道，同时调用Channel的destroy()接口销毁Channel，并归还内存给内存池。

	  在NetworkInterface类的deregisterChannel()函数中，移除频道之后，还要处理相关的善后工作，
	  如果是内部频道，那就要处理组件移除的事情。
说明：serverapp.cpp(37, 305)，network_interface.cpp(55, 388, 417)，channel.cpp(497, 648)


问题：NetworkInterface类pChannelDeregisterHandler()？
试答：设置或返回频道注销处理句柄，在ServerApp类的构造函数中设置，用来处理当前服务器进程的频道注销的逻辑。
	  具体调用的地方在deregisterChannel()函数中。
说明：network_interface.h(58)，network_interface.cpp(388)


问题：NetworkInterface类dispatcher()？
试答：返回pDispatcher_指针所指对象的引用。
说明：network_interface.h(63)


问题：NetworkInterface类extEndpoint()？
试答：返回Tcp的外部监听对象。
说明：network_interface.h(66)


问题：NetworkInterface类intEndpoint()？
试答：返回Tcp的内部监听对象。
说明：network_interface.h(67)


问题：NetworkInterface类c_str()？
试答：返回Tcp的外监听对象的ip地址，字符串形式。
说明：network_interface.h(69)


问题：NetworkInterface类channels()？
试答：返回频道容器。
说明：network_interface.h(71)


问题：NetworkInterface类sendIfDelayed()？
试答：没有看到这个接口使用的地方。
说明：network_interface.cpp(308)


问题：NetworkInterface类delayedSend()？
试答：延迟发送信息，目前只看到在日志频道中使用。
	  
	  延迟发送，其实就是把发送的信息缓存到下一帧去发送，NetworkInterface类的这个接口负责将需要延迟
	  发送的频道加入到DelayedChannels类的对象中，因为该对象派生于Task类，在构造的时候把自己加入到
	  了任务事务的处理队列中，这样每一贴都会检测是否又要延迟发送的Channel，并对其处理（send出去）。
	  
	  因为发送包是在任务事务流程之后构建的，所以是在下一帧的时候处理。
	  
说明：network_interface.cpp(302)


问题：NetworkInterface类good()？
试答：返回NetworkInterface是否准备就绪。内外监听和处理接口是否都好了。
说明：network_interface.h(77)


问题：NetworkInterface类onChannelTimeOut()？
试答：处理频道超时，具体逻辑在pChannelTimeOutHandler_中，因为每一个ServerApp不同，所以不在NetworkInterface
	  中处理，而是每个ServerApp自己负责。
说明：network_interface.cpp(417)


问题：NetworkInterface类processChannels()？
试答：每个ServerApp类的派生类都有一个定时器来处理组件的定时事务，其中的一个事务就是调用NetworkInterface类
	  processChannels()这个函数，如果频道异常则处理频道的注销，如果频道正常则清理统计变量的累计（用来预防
	  发送信息过大的统计）。
说明：network_interface.cpp(432)


问题：NetworkInterface类numExtChannels()？
试答：返回外部频道数量。就是客户端的连接数。
说明：network_interface.h(86)
	  
	  
问题：NetworkInterface类handleTimeout()？
试答：只是打印而已，而且没有创建定时器。
说明：network_interface.cpp(314)


问题：NetworkInterface类closeSocket()？
试答：关闭网络连接，析构函数的时候调用，也就是停服的时候处理。
说明：network_interface.cpp(115) 


问题：相关类型
试答；Address 
	  Channel 
	  EndPoint 
	  ListenerReceiver 
	  ChannelTimeOutHandler 
	  ChannelDeregisterHandler 
	  MessageHandlers 
	  DelayedChannels 