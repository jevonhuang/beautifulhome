
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
     
    <html xmlns="http://www.w3.org/1999/xhtml">
    
<head>  

    <script type="text/javascript" src="http://c.csdnimg.cn/pubfooter/js/tracking.js" charset="utf-8"></script>  

    <script type="text/javascript">
        var protocol = window.location.protocol;
        document.write('<script type="text/javascript" src="' + protocol + '//csdnimg.cn/pubfooter/js/repoAddr2.js?v=' + Math.random() + '"></' + 'script>');
    </script>

  
 <meta http-equiv="Cache-Control" content="no-siteapp" /><link rel="alternate" media="handheld" href="#" />

    <title>nginx源码分析—内存池结构ngx_pool_t及内存管理 - 学习，思考，记录，分享。
        - 博客频道 - CSDN.NET</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="description" content="转载自：&#160;http://blog.sina.com.cn/s/blog_a28e3dd901016512.html数据来源是中国中央气象局的天气数据，首先我们来了解一下他返回到的数据代表的意思。city:西安,&#160;// 地区名称city_en:xian,&#160;// 英文 (汉语拼音) 名称date_y:2012年8月30日,&#160;// 当前日期date:,&#160;// 网上解释是阴历年" />
    <script src="http://static.blog.csdn.net/scripts/jquery.js" type="text/javascript"></script>
      <script type="text/javascript" src="http://static.blog.csdn.net/scripts/jquery-version.js"></script>
    <script type="text/javascript" src="http://static.blog.csdn.net/scripts/ad.js?v=1.1"></script>
        <!--new top-->
               <link rel="stylesheet" href="http://c.csdnimg.cn/public/common/toolbar/css/index.css">        <!--new top-->
    
      <!-- ad begin -->
         <script language="javascript" type="text/javascript" src="http://ads.csdn.net/js/tracking.js"></script>
    <!-- ad end-->

    <link rel="Stylesheet" type="text/css" href="http://static.blog.csdn.net/skin/default/css/style.css?v=1.1" />
    <link id="RSSLink" title="RSS" type="application/rss+xml" rel="alternate" href="/livelylittlefish/rss/list" />
    <link rel="shortcut icon" href="http://c.csdnimg.cn/public/favicon.ico" />
    <link type="text/css" rel="stylesheet" href="http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/default.css" />
 


<script>
    var _hmt = _hmt || [];
    (function () {
        var hm = document.createElement("script");
        hm.src = "//hm.baidu.com/hm.js?6bcd52f51e9b3dce32bec4a3997715ac";
        var s = document.getElementsByTagName("script")[0];
        s.parentNode.insertBefore(hm, s);
    })();
</script>

</head>
<body>


    <!-- 广告位开始 -->
        <ins data-revive-zoneid="149" data-revive-id="8c38e720de1c90a6f6ff52f3f89c4d57"></ins>
    <!-- 广告位结束 -->

    
   
      <!--new top-->
    <script id="toolbar-tpl-scriptId" fixed="true" prod="blog" skin="black" src="http://c.csdnimg.cn/public/common/toolbar/js/html.js" type="text/javascript"></script>
     <!--new top-->
    <div id="container">
        <div id="header">
    <div class="header">
        <div id="blog_title">
            <h2>
                <a href="http://blog.csdn.net/livelylittlefish">学习，思考，记录，分享。</a></h2>
            <h3>——坚持原创！请尊重作者劳动，转载注明出处！</h3>
            <div class="clear">
            </div>
        </div>
        <div class="clear">
        </div>
        
     
    </div>
</div>
<div id="navigator">
    <div class="navigator_bg">
    </div>
    <div class="navigator">
        <ul>           
                <li id="btnContents"><a href="http://blog.csdn.net/livelylittlefish?viewmode=contents"><span onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_mulu'])">
                    <img src="http://static.blog.csdn.net/images/ico_list.gif">目录视图</span></a></li>
                <li id="btnView"><a href="http://blog.csdn.net/livelylittlefish?viewmode=list"><span onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_zhaiyao'])">
                    <img src="http://static.blog.csdn.net/images/ico_summary.gif">摘要视图</span></a></li>
                <li id="btnRss"><a href="http://blog.csdn.net/livelylittlefish/rss/list"><span onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_RSS'])">
                    <img src="http://static.blog.csdn.net/images/ico_rss.gif">订阅</span></a></li>                
            

            </ul>
    </div>
</div>
<script type="text/javascript">
    var username = "livelylittlefish";
    var _blogger = username;
    var blog_address = "http://blog.csdn.net/livelylittlefish";
    var static_host = "http://static.blog.csdn.net";
    var currentUserName = "";  
</script>

        <div id="body">
            <div id="main">
                <div class="main">
                        <div class="ad_class">
<div class="notice tracking-ad" data-mod='popu_3' > 


<a href="http://blog.csdn.net/blogdevteam/article/details/53636007
">
<font color=blue>【获奖公布】“我的2016”主题征文活动 


</font></a>

&nbsp;&nbsp;&nbsp;&nbsp

<a href="http://bss.csdn.net/m/topic/edu_develop
">
<font color=red>程序猿全指南，让【移动开发】更简单！ 
</font></a>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

<a href="http://blog.csdn.net/PK.html">
<font color=blue>【观点】移动原生App开发和HTML 5开发，你更看好哪个？
</font></a>

&nbsp;&nbsp;&nbsp;

<a href="http://blog.csdn.net/baiyuzhong2012/article/details/54098338">
<font color=red>博客的神秘功能
</font></a>


</div>                        </div>
                        



  
<link href="http://static.blog.csdn.net/css/comment1.css" type="text/css" rel="stylesheet" />
<link href="http://static.blog.csdn.net/css/style1.css" type="text/css" rel="stylesheet" />
<script language='JavaScript' type='text/javascript' src='http://download.csdn.net/js/jquery.cookie.js'></script>
<script type="text/javascript" src="http://c.csdnimg.cn/rabbit/search-service/main.js"></script>
<link rel="stylesheet" href="http://static.blog.csdn.net/public/res-min/markdown_views.css?v=1.0" />
<link rel="stylesheet" href="http://static.blog.csdn.net/css/category.css?v=1.0" />
<script type="text/javascript" src="http://static.blog.csdn.net/public/res/bower-libs/MathJax/MathJax.js?config=TeX-AMS_HTML"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/web-storage-cache.min.js"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/replace.min.js"></script>




  <script type="text/ecmascript">
      window.quickReplyflag = true;
           
            var isBole = false;
            
      
      var fasrc="http://my.csdn.net/my/favorite/miniadd?t=nginx%e6%ba%90%e7%a0%81%e5%88%86%e6%9e%90%e2%80%94%e5%86%85%e5%ad%98%e6%b1%a0%e7%bb%93%e6%9e%84ngx_pool_t%e5%8f%8a%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86&u=http://blog.csdn.net/livelylittlefish/article/details/6586946"

    </script>
<div id="article_details" class="details">
    <div class="article_title">   
         <span class="ico ico_type_Original"></span>


    <h1>
        <span class="link_title"><a href="/livelylittlefish/article/details/6586946">
        nginx源码分析—内存池结构ngx_pool_t及内存管理            
        </a></span>
    </h1>
</div>

   

        <div class="article_manage clearfix">
        <div class="article_l">
            <span class="link_categories">
            标签：
              <a href='http://www.csdn.net/tag/nginx' target=_blank onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);">nginx</a><a href='http://www.csdn.net/tag/alignment' target=_blank onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);">alignment</a><a href='http://www.csdn.net/tag/struct' target=_blank onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);">struct</a><a href='http://www.csdn.net/tag/%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84' target=_blank onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);">数据结构</a><a href='http://www.csdn.net/tag/null' target=_blank onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);">null</a><a href='http://www.csdn.net/tag/callback' target=_blank onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);">callback</a>
            </span>
        </div>
        <div class="article_r">
            <span class="link_postdate">2011-07-06 00:08</span>
            <span class="link_view" title="阅读次数">25024人阅读</span>
            <span class="link_comments" title="评论次数"> <a href="#comments" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_pinglun'])">评论</a>(40)</span>
            <span class="link_collect tracking-ad" data-mod="popu_171"> <a href="javascript:void(0);" onclick="javascript:collectArticle('nginx%e6%ba%90%e7%a0%81%e5%88%86%e6%9e%90%e2%80%94%e5%86%85%e5%ad%98%e6%b1%a0%e7%bb%93%e6%9e%84ngx_pool_t%e5%8f%8a%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86','6586946');return false;" title="收藏">收藏</a></span>
             <span class="link_report"> <a href="#report" onclick="javascript:report(6586946,2);return false;" title="举报">举报</a></span>

        </div>
    </div>
    <div class="embody"  style="display:none" id="embody">
        <span class="embody_t">本文章已收录于：</span>
        <div class="embody_c" id="lib" value="{&quot;err&quot;:0,&quot;msg&quot;:&quot;ok&quot;,&quot;data&quot;:[{&quot;name&quot;:&quot;直播技术知识库&quot;,&quot;url&quot;:&quot;http://lib.csdn.net/base/57?source=blogtop&quot;,&quot;logo&quot;:&quot;http://img.knowledge.csdn.net/upload/base/1472614759773_773.jpg&quot;}]}"></div>
    </div>
    <style type="text/css">        
            .embody{
                padding:10px 10px 10px;
                margin:0 -20px;
                border-bottom:solid 1px #ededed;                
            }
            .embody_b{
                margin:0 ;
                padding:10px 0;
            }
            .embody .embody_t,.embody .embody_c{
                display: inline-block;
                margin-right:10px;
            }
            .embody_t{
                font-size: 12px;
                color:#999;
            }
            .embody_c{
                font-size: 12px;
            }
            .embody_c img,.embody_c em{
                display: inline-block;
                vertical-align: middle;               
            }
             .embody_c img{               
                width:30px;
                height:30px;
            }
            .embody_c em{
                margin: 0 20px 0 10px;
                color:#333;
                font-style: normal;
            }
    </style>
    <script  type="text/javascript">
        $(function () {
            try
            {
                var lib = eval("("+$("#lib").attr("value")+")");
                var html = "";
                if (lib.err == 0) {
                    $.each(lib.data, function (i) {
                        var obj = lib.data[i];
                        //html += '<img src="' + obj.logo + '"/>' + obj.name + "&nbsp;&nbsp;";
                        html += ' <a href="' + obj.url + '" target="_blank">';
                        html += ' <img src="' + obj.logo + '">';
                        html += ' <em><b>' + obj.name + '</b></em>';
                        html += ' </a>';
                    });
                    if (html != "") {
                        setTimeout(function () {
                            $("#lib").html(html);                      
                            $("#embody").show();
                        }, 100);
                    }
                }      
            } catch (err)
            { }
            
        });
    </script>
      <div class="category clearfix">
        <div class="category_l">
           <img src="http://static.blog.csdn.net/images/category_icon.jpg">
            <span>分类：</span>
        </div>
        <div class="category_r">
                    <label  onclick="GetCategoryArticles('838107','livelylittlefish','top','6586946');">
                        <span onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_fenlei']);">高性能服务器<em>（11）</em></span>
                      <img class="arrow-down" src="http://static.blog.csdn.net/images/arrow_triangle _down.jpg" style="display:inline;">
                      <img class="arrow-up" src="http://static.blog.csdn.net/images/arrow_triangle_up.jpg" style="display:none;">
                        <div class="subItem">
                            <div class="subItem_t"><a  href="http://blog.csdn.net/livelylittlefish/article/category/838107"  target="_blank">作者同类文章</a><i class="J_close">X</i></div>
                            <ul class="subItem_l" id="top_838107">                            
                            </ul>
                        </div>
                    </label>                    
        </div>
    </div>
    <script   type="text/javascript" src="http://static.blog.csdn.net/scripts/category.js"></script>  
        <div   class="bog_copyright">         
            <p  class="copyright_p" >版权声明：本文为博主原创文章，未经博主允许不得转载。</p>
        </div>

  

  
  
     

<div id="article_content" class="article_content">
本博客（<a href="http://blog.csdn.net/livelylittlefish">http://blog.csdn.net/livelylittlefish</a>）贴出作者（阿波）相关研究、学习内容所做的笔记，欢迎广大朋友指正！<br /><br /><p></p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt" lang="en-US"><span style="FONT-WEIGHT: bold">Content</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">0. </span><span style="font-family:宋体;">序</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">1. </span><span style="font-family:宋体;">内存池结构</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">1.1 ngx_pool_t</span><span style="font-family:宋体;">结构</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">1.2 </span><span style="font-family:宋体;">其他相关结构</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">1.3 ngx_pool_t</span><span style="font-family:宋体;">的逻辑结构</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">2. </span><span style="font-family:宋体;">内存池操作</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">2.1 </span><span style="font-family:宋体;">创建内存池</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">2.2 </span><span style="font-family:宋体;">销毁内存池</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">2.3 </span><span style="font-family:宋体;">重置内存池</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">2.4 </span><span style="font-family:宋体;">分配内存</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">2.4.1 ngx_palloc()</span><span style="font-family:宋体;">函数分析</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">2.4.2 ngx_palloc_block()</span><span style="font-family:宋体;">函数分析</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">2.5 </span><span style="font-family:宋体;">释放内存</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:'Lucida Console';">2.6 </span><span lang="zh-CN" style="font-family:宋体;">注册</span><span lang="en-US" style="font-family:'Lucida Console';">cleanup</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">2.7 </span><span style="font-family:宋体;">内存池的物理结构</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">3. </span><span style="font-family:宋体;">一个例子</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">3.1 </span><span style="font-family:宋体;">代码</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">3.2 </span><span style="font-family:宋体;">如何编译</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">3.3 </span><span style="font-family:宋体;">运行结果</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span style="font-family:'Lucida Console';">4. </span><span style="font-family:宋体;">小结</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';">5. </span><span lang="zh-CN" style="font-family:宋体;">致谢</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">0. </span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">序</span></p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';">nginx</span><span lang="zh-CN" style="font-family:宋体;">对内存的管理由其自己实现的内存池结构</span><span lang="en-US" style="font-family:'Lucida Console';">ngx_pool_t</span><span lang="zh-CN" style="font-family:宋体;">来完成，本文重点叙述</span><span lang="en-US" style="font-family:'Lucida Console';">nginx</span><span lang="zh-CN" style="font-family:宋体;">的内存管理。</span></p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';">nginx</span><span lang="zh-CN" style="font-family:宋体;">内存管理相关文件：</span></p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt" lang="en-US">(1) ./src/os/unix/ngx_alloc.h/.c</p><ul style="MARGIN-TOP: 0in; unicode-bidi: embed; DIRECTION: ltr; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.375in" type="disc"><li style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle"><span style="font-family:宋体;FONT-SIZE: 10pt">内存相关的操作，封装了最基本的内存分配函数</span></li><li style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle"><span lang="zh-CN" style="font-family:宋体;FONT-SIZE: 10pt">如</span><span lang="zh-CN" style="font-family:'Lucida Console';FONT-SIZE: 10pt">free</span><span lang="en-US" style="font-family:'Lucida Console';FONT-SIZE: 10pt">/malloc/</span><span lang="zh-CN" style="font-family:'Lucida Console';FONT-SIZE: 10pt">memalign</span><span lang="en-US" style="font-family:'Lucida Console';FONT-SIZE: 10pt">/</span><span lang="zh-CN" style="font-family:'Lucida Console';FONT-SIZE: 10pt">posix_memalign</span><span lang="zh-CN" style="font-family:宋体;FONT-SIZE: 10pt">，分别被封装为</span><span lang="en-US" style="font-family:'Lucida Console';FONT-SIZE: 10pt">ngx_free</span><span lang="zh-CN" style="font-family:宋体;FONT-SIZE: 10pt">，</span><span lang="en-US" style="font-family:'Lucida Console';FONT-SIZE: 10pt">ngx_alloc/ngx_calloc, ngx_memalign</span></li><ul style="MARGIN-TOP: 0in; unicode-bidi: embed; DIRECTION: ltr; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.375in" type="disc"><li style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle"><span lang="en-US" style="font-family:'Lucida Console';FONT-SIZE: 10pt">ngx_alloc</span><span lang="zh-CN" style="font-family:宋体;FONT-SIZE: 10pt">：封装</span><span lang="en-US" style="font-family:'Lucida Console';FONT-SIZE: 10pt">malloc</span><span lang="zh-CN" style="font-family:宋体;FONT-SIZE: 10pt">分配内存</span></li><li style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle"><span lang="en-US" style="font-family:'Lucida Console';FONT-SIZE: 10pt">ngx_calloc</span><span lang="zh-CN" style="font-family:宋体;FONT-SIZE: 10pt">：封装</span><span lang="en-US" style="font-family:'Lucida Console';FONT-SIZE: 10pt">malloc</span><span lang="zh-CN" style="font-family:宋体;FONT-SIZE: 10pt">分配内存，并初始化空间内容为</span><span lang="en-US" style="font-family:'Lucida Console';FONT-SIZE: 10pt">0</span></li><li style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle"><span lang="en-US" style="font-family:'Lucida Console';FONT-SIZE: 10pt">ngx_memalign</span><span lang="zh-CN" style="font-family:宋体;FONT-SIZE: 10pt">：返回基于一个指定</span><span lang="en-US" style="font-family:'Lucida Console';FONT-SIZE: 10pt">alignment</span><span lang="zh-CN" style="font-family:宋体;FONT-SIZE: 10pt">的大小为</span><span lang="en-US" style="font-family:'Lucida Console';FONT-SIZE: 10pt">size</span><span lang="zh-CN" style="font-family:宋体;FONT-SIZE: 10pt">的内存空间，且其地址为</span><span lang="en-US" style="font-family:'Lucida Console';FONT-SIZE: 10pt">alignment</span><span lang="zh-CN" style="font-family:宋体;FONT-SIZE: 10pt">的整数倍，</span><span lang="en-US" style="font-family:'Lucida Console';FONT-SIZE: 10pt">alignment</span><span lang="zh-CN" style="font-family:宋体;FONT-SIZE: 10pt">为</span><span lang="en-US" style="font-family:'Lucida Console';FONT-SIZE: 10pt">2</span><span lang="zh-CN" style="font-family:宋体;FONT-SIZE: 10pt">的幂。</span></li></ul></ul><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt" lang="en-US">(2) ./src/core/ngx_palloc.h/.c</p><ul style="MARGIN-TOP: 0in; unicode-bidi: embed; DIRECTION: ltr; MARGIN-BOTTOM: 0in; MARGIN-LEFT: 0.375in" type="disc"><li style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; VERTICAL-ALIGN: middle"><span lang="zh-CN" style="font-family:宋体;FONT-SIZE: 10pt">封装创建</span><span lang="en-US" style="font-family:'Lucida Console';FONT-SIZE: 10pt">/</span><span lang="zh-CN" style="font-family:宋体;FONT-SIZE: 10pt">销毁内存池，从内存池分配空间等函数</span></li></ul><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';">.</span><span lang="zh-CN" style="font-family:宋体;">表示</span><span lang="en-US" style="font-family:'Lucida Console';">nginx-1.0.4</span><span lang="zh-CN" style="font-family:宋体;">代码目录，本文为</span><span lang="en-US" style="font-family:'Lucida Console';">/usr/src/nginx-1.0.4</span><span lang="zh-CN" style="font-family:宋体;">。</span></p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt" lang="en-US">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">1. </span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">内存池结构</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';">nginx</span><span lang="zh-CN" style="font-family:宋体;">对内存的管理均统一完成，例如，在特定的生命周期统一建立内存池</span><span lang="en-US" style="font-family:'Lucida Console';">(</span><span lang="zh-CN" style="font-family:宋体;">如</span><span lang="en-US" style="font-family:'Lucida Console';">main</span><span lang="zh-CN" style="font-family:宋体;">函数系统启动初期即分配</span><span lang="en-US" style="font-family:'Lucida Console';">1024B</span><span lang="zh-CN" style="font-family:宋体;">大小的内存池</span><span lang="en-US" style="font-family:'Lucida Console';">)</span><span lang="zh-CN" style="font-family:宋体;">，需要内存时统一分配内存池中的内存，在适当的时候释放内存池的内存</span><span lang="en-US" style="font-family:'Lucida Console';">(</span><span lang="zh-CN" style="font-family:宋体;">如关闭</span><span lang="en-US" style="font-family:'Lucida Console';">http</span><span lang="zh-CN" style="font-family:宋体;">链接时调用</span><span lang="en-US" style="font-family:'Lucida Console';">ngx_destroy_pool</span><span lang="zh-CN" style="font-family:宋体;">进行销毁</span><span lang="en-US" style="font-family:'Lucida Console';">)</span><span lang="zh-CN" style="font-family:宋体;">。</span></p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">因此，开发者只需在需要内存时进行申请即可，不用过多考虑内存的释放等问题，大大提高了开发的效率。先看一下内存池结构。</p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">1.1 ngx_pool_t</span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">结构</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:宋体;">此处统一一下概念，内存池的数据块：即分配内存在这些数据块中进行，一个内存池可以有多一个内存池数据块。</span><span lang="en-US" style="font-family:'Lucida Console';">nginx</span><span lang="zh-CN" style="font-family:宋体;">的内存池结构如下。</span>&nbsp;</p><pre class="cpp" name="code">00048: typedef struct {
00049:   u_char      *last;  //当前内存池分配到此处，即下一次分配从此处开始
00050:   u_char      *end;   //内存池结束位置
00051:   ngx_pool_t  *next;  //内存池里面有很多块内存，这些内存块就是通过该指针连成链表的
00052:   ngx_uint_t  failed; //内存池分配失败次数
00053: } ngx_pool_data_t;    //内存池的数据块位置信息
00054:
00055:
00056: struct ngx_pool_s{    //内存池头部结构
00057:    ngx_pool_data_t     d;       //内存池的数据块
00058:    size_t              max;     //内存池数据块的最大值
00059:    ngx_pool_t         *current; //指向当前内存池
00060:    ngx_chain_t        *chain;   //该指针挂接一个ngx_chain_t结构
00061:    ngx_pool_large_t   *large;   //大块内存链表，即分配空间超过max的内存
00062:    ngx_pool_cleanup_t *cleanup; //释放内存池的callback
00063:    ngx_log_t          *log;     //日志信息
00064: };</pre><p><span lang="zh-CN" style="font-family:宋体;">其中，</span><span lang="zh-CN" style="font-family:'Lucida Console';">sizeof(ngx_pool_data_t)</span><span lang="en-US" style="font-family:'Lucida Console';">=16B</span><span lang="zh-CN" style="font-family:宋体;">，</span><span lang="zh-CN" style="font-family:'Lucida Console';">sizeof(ngx_pool_t)</span><span lang="en-US" style="font-family:'Lucida Console';">=40B</span><span lang="zh-CN" style="font-family:宋体;">。</span><br /><span lang="en-US" style="font-family:'Lucida Console';">nginx</span><span lang="zh-CN" style="font-family:宋体;">将几乎所有的结构体放在</span><span lang="en-US" style="font-family:'Lucida Console';">ngx_core.h</span><span lang="zh-CN" style="font-family:宋体;">文件中重新进行了申明，如下。</span></p><pre class="cpp" name="code">typedef struct ngx_module_s      ngx_module_t;
typedef struct ngx_conf_s        ngx_conf_t;
typedef struct ngx_cycle_s       ngx_cycle_t;
typedef struct ngx_pool_s        ngx_pool_t;
typedef struct ngx_chain_s       ngx_chain_t;
typedef struct ngx_log_s         ngx_log_t;
typedef struct ngx_array_s       ngx_array_t;
typedef struct ngx_open_file_s   ngx_open_file_t;
typedef struct ngx_command_s     ngx_command_t;
typedef struct ngx_file_s        ngx_file_t;
typedef struct ngx_event_s       ngx_event_t;
typedef struct ngx_event_aio_s   ngx_event_aio_t;
typedef struct ngx_connection_s  ngx_connection_t;</pre><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">1.2 </span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">其他相关结构</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:宋体;">其他与内存池相干的数据结构，如清除资源的</span><span lang="en-US" style="font-family:'Lucida Console';">cleanup</span><span lang="zh-CN" style="font-family:宋体;">链表，分配的大块内存链表等，如下。</span></p><pre class="cpp" name="code">00015: /*
00016: * NGX_MAX_ALLOC_FROM_POOL should be (ngx_pagesize - 1), i.e. 4095 on x86.
00017: * On Windows NT it decreases a number of locked pages in a kernel.
00018: */
00019: #define NGX_MAX_ALLOC_FROM_POOL (ngx_pagesize - 1)  //在x86体系结构下，该值一般为4096B，即4K
00020:
00021: #define NGX_DEFAULT_POOL_SIZE    (16* 1024)
00022:
00023: #define NGX_POOL_ALIGNMENT    16
00024: #define NGX_MIN_POOL_SIZE    \
00025:    ngx_align((sizeof(ngx_pool_t) + 2 * sizeof(ngx_pool_large_t)),    \
00026:    NGX_POOL_ALIGNMENT)
00027:
00028:
00029: typedef void (*ngx_pool_cleanup_pt)(void *data);    //cleanup的callback类型
00030:
00031: typedef struct ngx_pool_cleanup_s ngx_pool_cleanup_t;
00032:
00033: struct ngx_pool_cleanup_s{
00034:    ngx_pool_cleanup_pt handler;
00035:    void    *data;              //指向要清除的数据
00036:    ngx_pool_cleanup_t *next;   //下一个cleanup callback
00037: };
00038:
00039:
00040: typedef struct ngx_pool_large_s ngx_pool_large_t;
00041:
00042: struct ngx_pool_large_s{
00043:    ngx_pool_large_t  *next;    //指向下一块大块内存
00044:    void    *alloc;             //指向分配的大块内存
00045: };
...
...
00067: typedef struct {
00068:    ngx_fd_t   fd;
00069:    u_char    *name;
00070:    ngx_log_t *log;
00071: } ngx_pool_cleanup_file_t;
00072:</pre><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt">(gdb) p getpagesize()</p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt">$18 = 4096</p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:宋体;">全局变量</span><span lang="zh-CN" style="font-family:'Lucida Console';">ngx_pagesize</span><span lang="zh-CN" style="font-family:宋体;">的初始化是在如下函数中完成的。</span><span lang="en-US" style="font-family:'Lucida Console';">./src/os/unix/ngx_posix_init.c</span></p><pre class="cpp" name="code">ngx_int_t
ngx_os_init(ngx_log_t *log)
{
    ngx_uint_t  n;

#if (NGX_HAVE_OS_SPECIFIC_INIT)
    if (ngx_os_specific_init(log) != NGX_OK) {
        return NGX_ERROR;
    }
#endif

    ngx_init_setproctitle(log);

    /** 该函数为glibc的库函数，由系统调用实现，返回内核中的PAGE_SIZE，该值依赖体系结构*/
    ngx_pagesize = getpagesize();      
    ngx_cacheline_size = NGX_CPU_CACHE_LINE;
    ...
}</pre><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">这些数据结构之间的关系，请参考后面的图。</p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">1.3 ngx_pool_t</span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">的逻辑结构</span></p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:宋体;">这些数据结构逻辑结构图如下。注：本文采用</span><span lang="en-US" style="font-family:'Lucida Console';">UML</span><span lang="zh-CN" style="font-family:宋体;">的方式画出该图。</span></p><p><img alt="" src="http://hi.csdn.net/attachment/201107/5/0_1309882017mTT4.gif" /></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">2. </span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">内存池操作</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">2.1 </span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">创建内存池</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:宋体;">创建内存池有</span><span lang="en-US" style="font-family:'Lucida Console';">ngx_create_pool()</span><span lang="zh-CN" style="font-family:宋体;">函数完成，代码如下。</span></p><pre class="cpp" name="code">00015: ngx_pool_t *
00016: ngx_create_pool(size_t size, ngx_log_t *log)
00017: {
00018:    ngx_pool_t *p;
00019:
00020:    p = ngx_memalign(NGX_POOL_ALIGNMENT, size, log);
00021:    if (p == NULL) {
00022:       return NULL;
00023:    }
00024:
00025:    p-&gt;d.last = (u_char *) p + sizeof(ngx_pool_t);  //last指向ngx_pool_t结构体之后数据取起始位置
00026:    p-&gt;d.end = (u_char *) p + size;  //end指向分配的整个size大小的内存的末尾
00027:    p-&gt;d.next = NULL;
00028:    p-&gt;d.failed = 0;
00029:
00030:    size = size - sizeof(ngx_pool_t);
00031:    p-&gt;max = (size &lt; NGX_MAX_ALLOC_FROM_POOL) ? size : NGX_MAX_ALLOC_FROM_POOL;  //最大不超过4095B
00032:
00033:    p-&gt;current = p;
00034:    p-&gt;chain = NULL;
00035:    p-&gt;large = NULL;
00036:    p-&gt;cleanup = NULL;
00037:    p-&gt;log = log;
00038:
00039:    return p;
00040: }</pre><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:宋体;">例如，调用</span><span lang="en-US" style="font-family:'Lucida Console';">ngx_create_pool(1024, 0x80d1c4c)</span><span lang="zh-CN" style="font-family:宋体;">后，创建的内存池物理结构如下图。</span></p><p><img alt="" src="http://hi.csdn.net/attachment/201107/5/0_1309882022ZpNM.gif" /></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">2.2 </span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">销毁内存池</span></p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">销毁内存池由如下函数完成。</p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt">void ngx_destroy_pool(ngx_pool_t *pool)</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:宋体;">该函数将遍历内存池链表，所有释放内存，如果注册了</span><span lang="en-US" style="font-family:'Lucida Console';">clenup(</span><span lang="en-US" style="font-family:宋体;">也是一个链表结构</span><span lang="en-US" style="font-family:'Lucida Console';">)</span><span lang="en-US" style="font-family:宋体;">，</span><span lang="zh-CN" style="font-family:宋体;">亦将遍历该</span><span lang="en-US" style="font-family:'Lucida Console';">cleanup</span><span lang="zh-CN" style="font-family:宋体;">链表结构依次</span><span lang="en-US" style="font-family:宋体;">调用</span><span lang="en-US" style="font-family:'Lucida Console';">clenup</span><span lang="en-US" style="font-family:宋体;">的</span><span lang="en-US" style="font-family:'Lucida Console';">handler</span><span lang="en-US" style="font-family:宋体;">清理。</span><span lang="zh-CN" style="font-family:宋体;">同时，还将遍历</span><span lang="en-US" style="font-family:'Lucida Console';">large</span><span lang="zh-CN" style="font-family:宋体;">链表，释放大块内存。</span></p><p style="MARGIN: 0in; FONT-FAMILY: Calibri; FONT-SIZE: 11pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">2.3 </span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">重置内存池</span></p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt" lang="en-US">&nbsp;</p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">重置内存池由下面的函数完成。</p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt">void ngx_reset_pool(ngx_pool_t *pool);</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:宋体;">该函数将释放所有</span><span lang="en-US" style="font-family:'Lucida Console';">large</span><span lang="en-US" style="font-family:宋体;">内存，并且将</span><span lang="en-US" style="font-family:'Lucida Console';">d-&gt;last</span><span lang="en-US" style="font-family:宋体;">指针重新指向</span><span lang="en-US" style="font-family:'Lucida Console';">ngx_pool_t</span><span lang="en-US" style="font-family:宋体;">结构之后</span><span lang="zh-CN" style="font-family:宋体;">数据区的开始位置，同刚创建后的位置相同。</span></p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt" lang="en-US">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">2.4 </span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">分配内存</span></p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">内存分配的函数如下。</p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt">void *ngx_palloc(ngx_pool_t *pool, size_t size);</p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt">void *ngx_pnalloc(ngx_pool_t *pool, size_t size);</p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt">void *ngx_pcalloc(ngx_pool_t *pool, size_t size);</p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt">void *ngx_pmemalign(ngx_pool_t *pool, size_t size, size_t alignment);</p><p style="MARGIN: 0in; FONT-FAMILY: Calibri; FONT-SIZE: 11pt">&nbsp;</p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">返回值为分配的内存起始地址。选择其中的两个函数进行分析，其他的也很好理解，省略。</p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">2.4.1 ngx_palloc()</span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">函数分析</span></p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';">ngx_palloc()</span><span lang="zh-CN" style="font-family:宋体;">代码如下，分析请参考笔者所加的注释。</span></p><pre class="cpp" name="code">00115: void *
00116: ngx_palloc(ngx_pool_t *pool, size_t size)
00117: {
00118:    u_char    *m;
00119:    ngx_pool_t *p;
00120:
00121:    if (size &lt;= pool-&gt;max) {//判断待分配内存与max值
00122:
00123:       p = pool-&gt;current;   //小于max值，则从current节点开始遍历pool链表
00124:
00125:       do {
00126:          m = ngx_align_ptr(p-&gt;d.last, NGX_ALIGNMENT);
00127:
00128:          if ((size_t) (p-&gt;d.end - m) &gt;= size) {
00129:             p-&gt;d.last = m + size;  //在该节点指向的内存块中分配size大小的内存
00130:
00131:             return m;
00132:          }
00133:
00134:          p = p-&gt;d.next;
00135:
00136:       } while (p);
00137:
00138:       return ngx_palloc_block(pool, size); //链表里没有能分配size大小内存的节点，则生成一个新的节点并在其中分配内存
00139:    }
00140:
00141:    return ngx_palloc_large(pool, size);  //大于max值，则在large链表里分配内存
00142: }</pre><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:宋体;">例如，在</span><span lang="en-US" style="font-family:'Lucida Console';">2.1</span><span lang="zh-CN" style="font-family:宋体;">节中创建的内存池中分配</span><span lang="en-US" style="font-family:'Lucida Console';">200B</span><span lang="zh-CN" style="font-family:宋体;">的内存，调用</span><span lang="en-US" style="font-family:'Lucida Console';">ngx_palloc(pool, 200)</span><span lang="zh-CN" style="font-family:宋体;">后，该内存池物理结构如下图。</span></p><p><img alt="" src="http://hi.csdn.net/attachment/201107/5/0_13098820269Eii.gif" /></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">2.4.2 ngx_palloc_block()</span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">函数分析</span></p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';">ngx_palloc_block</span><span lang="zh-CN" style="font-family:宋体;">函数代码如下，分析请参考笔者所加的注释。</span></p><pre class="cpp" name="code">00175: static void *
00176: ngx_palloc_block(ngx_pool_t *pool, size_t size)
00177: {
00178:    u_char    *m;
00179:    size_t    psize;
00180:    ngx_pool_t *p, *new, *current;
00181:
00182:    psize = (size_t) (pool-&gt;d.end - (u_char *) pool);      //计算pool的大小
00183:
00184:    m = ngx_memalign(NGX_POOL_ALIGNMENT, psize, pool-&gt;log);//分配一块与pool大小相同的内存
00185:    if (m == NULL) {
00186:       return NULL;
00187:    }
00188:
00189:    new = (ngx_pool_t *) m;
00190:
00191:    new-&gt;d.end = m + psize; //设置end指针
00192:    new-&gt;d.next = NULL;
00193:    new-&gt;d.failed = 0;
00194:
00195:    m += sizeof(ngx_pool_data_t); //让m指向该块内存ngx_pool_data_t结构体之后数据区起始位置
00196:    m = ngx_align_ptr(m, NGX_ALIGNMENT); //按4字节对齐
00197:    new-&gt;d.last = m + size;       //在数据区分配size大小的内存并设置last指针
00198:
00199:    current = pool-&gt;current;
00200:
00201:    for (p = current; p-&gt;d.next; p = p-&gt;d.next) {
00202:       if (p-&gt;d.failed++ &gt; 4) {   //failed的值只在此处被修改
00203:          current = p-&gt;d.next;    //失败4次以上移动current指针
00204:       }
00205:    }
00206:
00207:    p-&gt;d.next = new;  //将这次分配的内存块new加入该内存池
00208:
00209:    pool-&gt;current = current ? current : new;
00210:
00211:    return m;
00212: }</pre><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">注意：</span><span lang="zh-CN" style="font-family:宋体;">该函数分配一块内存后，</span><span lang="en-US" style="font-family:'Lucida Console';">last</span><span lang="zh-CN" style="font-family:宋体;">指针指向的是</span><span lang="en-US" style="font-family:'Lucida Console';">ngx_pool_data_t</span><span lang="zh-CN" style="font-family:宋体;">结构体</span><span lang="en-US" style="font-family:'Lucida Console';">(</span><span lang="zh-CN" style="font-family:宋体;">大小</span><span lang="en-US" style="font-family:'Lucida Console';">16B)</span><span lang="zh-CN" style="font-family:宋体;">之后数据区的起始位置。而创建内存池时时，</span><span lang="en-US" style="font-family:'Lucida Console';">last</span><span lang="zh-CN" style="font-family:宋体;">指针指向的是</span><span lang="en-US" style="font-family:'Lucida Console';">ngx_pool_t</span><span lang="zh-CN" style="font-family:宋体;">结构体</span><span lang="en-US" style="font-family:'Lucida Console';">(</span><span lang="zh-CN" style="font-family:宋体;">大小</span><span lang="en-US" style="font-family:'Lucida Console';">40B)</span><span lang="zh-CN" style="font-family:宋体;">之后数据区的起始位置。</span></p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:宋体;">结合</span><span lang="en-US" style="font-family:'Lucida Console';">2.7</span><span lang="zh-CN" style="font-family:宋体;">节的内存池的物理结构，更容易理解。</span></p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">2.5</span><span lang="en-US" style="font-family:宋体;FONT-WEIGHT: bold"> </span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">释放内存</span></p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">请参考如下函数，不再赘述。&nbsp;</p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt"><span lang="zh-CN">ngx_int_t</span><span lang="en-US"> </span><span lang="zh-CN">ngx_pfree(ngx_pool_t *pool, void *p)</span></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:宋体;">需要注意的是该函数只释放</span><span lang="en-US" style="font-family:'Lucida Console';">large</span><span lang="zh-CN" style="font-family:宋体;">链表中注册的内存，普通内存在</span><span lang="en-US" style="font-family:'Lucida Console';">ngx_destroy_pool</span><span lang="zh-CN" style="font-family:宋体;">中统一释放。</span></p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">2.6 </span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">注册</span><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">cleanup</span></p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">请参考如下函数，该函数实现也很简单，此处不再赘述。</p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt">ngx_pool_cleanup_t *ngx_pool_cleanup_add(ngx_pool_t *p, size_t size)</p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">2.7 </span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">内存池的物理结构</span></p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:宋体;">针对本文第</span><span lang="en-US" style="font-family:'Lucida Console';">3</span><span lang="zh-CN" style="font-family:宋体;">节的例子，画出的内存池的物理结构如下图。</span></p><p><img alt="" src="http://hi.csdn.net/attachment/201107/5/0_130988203286UE.gif" />&nbsp;&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:宋体;">从该图也能看出</span><span lang="en-US" style="font-family:'Lucida Console';">2.4</span><span lang="zh-CN" style="font-family:宋体;">节的结论，即内存池第一块内存前</span><span lang="en-US" style="font-family:'Lucida Console';">40</span><span lang="zh-CN" style="font-family:宋体;">字节为</span><span lang="en-US" style="font-family:'Lucida Console';">ngx_pool_t</span><span lang="zh-CN" style="font-family:宋体;">结构，后续加入的内存块前</span><span lang="en-US" style="font-family:'Lucida Console';">16</span><span lang="zh-CN" style="font-family:宋体;">个字节为</span><span lang="en-US" style="font-family:'Lucida Console';">ngx_pool_data_t</span><span lang="zh-CN" style="font-family:宋体;">结构，这两个结构之后便是真正可以分配内存区域。</span></p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:宋体;">因此，本文</span><span lang="en-US" style="font-family:'Lucida Console';">Reference</span><span lang="zh-CN" style="font-family:宋体;">中的</span><a href="http://code.google.com/p/nginxsrp/wiki/NginxCodeReview"><span lang="zh-CN" style="font-family:宋体;">内存分配相关</span></a><span lang="zh-CN" style="font-family:宋体;">中的图是有一点点小问题的，并不是每一个节点的前面都是</span><span lang="en-US" style="font-family:'Lucida Console';">ngx_pool_t</span><span lang="zh-CN" style="font-family:宋体;">结构。</span></p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">3. </span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">一个例子</span></p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">理解并掌握开源软件的最好方式莫过于自己写一些测试代码，或者改写软件本身，并进行调试来进一步理解开源软件的原理和设计方法。本节给出一个创建内存池并从中分配内存的简单例子。</p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">3.1</span><span lang="en-US" style="font-family:宋体;FONT-WEIGHT: bold"> </span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">代码</span></p><pre class="cpp" name="code">/**
 * ngx_pool_t test, to test ngx_palloc, ngx_palloc_block, ngx_palloc_large
 */

#include &lt;stdio.h&gt;
#include &quot;ngx_config.h&quot;
#include &quot;ngx_conf_file.h&quot;
#include &quot;nginx.h&quot;
#include &quot;ngx_core.h&quot;
#include &quot;ngx_string.h&quot;
#include &quot;ngx_palloc.h&quot;

volatile ngx_cycle_t  *ngx_cycle;

void ngx_log_error_core(ngx_uint_t level, ngx_log_t *log, ngx_err_t err,
            const char *fmt, ...)
{
}

void dump_pool(ngx_pool_t* pool)
{
    while (pool)
    {
        printf(&quot;pool = 0x%x\n&quot;, pool);
        printf(&quot;  .d\n&quot;);
        printf(&quot;    .last = 0x%x\n&quot;, pool-&gt;d.last);
        printf(&quot;    .end = 0x%x\n&quot;, pool-&gt;d.end);
        printf(&quot;    .next = 0x%x\n&quot;, pool-&gt;d.next);
        printf(&quot;    .failed = %d\n&quot;, pool-&gt;d.failed);
        printf(&quot;  .max = %d\n&quot;, pool-&gt;max);
        printf(&quot;  .current = 0x%x\n&quot;, pool-&gt;current);
        printf(&quot;  .chain = 0x%x\n&quot;, pool-&gt;chain);
        printf(&quot;  .large = 0x%x\n&quot;, pool-&gt;large);
        printf(&quot;  .cleanup = 0x%x\n&quot;, pool-&gt;cleanup);
        printf(&quot;  .log = 0x%x\n&quot;, pool-&gt;log);
        printf(&quot;available pool memory = %d\n\n&quot;, pool-&gt;d.end - pool-&gt;d.last);
        pool = pool-&gt;d.next;
    }
}

int main()
{
    ngx_pool_t *pool;

    printf(&quot;--------------------------------\n&quot;);
    printf(&quot;create a new pool:\n&quot;);
    printf(&quot;--------------------------------\n&quot;);
    pool = ngx_create_pool(1024, NULL);
    dump_pool(pool);

    printf(&quot;--------------------------------\n&quot;);
    printf(&quot;alloc block 1 from the pool:\n&quot;);
    printf(&quot;--------------------------------\n&quot;);
    ngx_palloc(pool, 512);
    dump_pool(pool);

    printf(&quot;--------------------------------\n&quot;);
    printf(&quot;alloc block 2 from the pool:\n&quot;);
    printf(&quot;--------------------------------\n&quot;);
    ngx_palloc(pool, 512);
    dump_pool(pool);

    printf(&quot;--------------------------------\n&quot;);
    printf(&quot;alloc block 3 from the pool :\n&quot;);
    printf(&quot;--------------------------------\n&quot;);
    ngx_palloc(pool, 512);
    dump_pool(pool);

    ngx_destroy_pool(pool);
    return 0;
}</pre><p></p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">3.2</span><span lang="en-US" style="font-family:宋体;FONT-WEIGHT: bold"> </span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">如何编译</span></p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">这个问题是编写测试代码或者改写软件本身最迫切需要解决的问题，否则，编写的代码无从编译或运行，那也无从进行调试并理解软件了。</p><p style="MARGIN: 0in; FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:宋体;">如何对自己编写的测试代码进行编译，可参考</span><a href="http://blog.csdn.net/livelylittlefish/article/details/6448939"><span lang="zh-CN" style="font-family:'Lucida Console';">Linux</span><span lang="zh-CN" style="font-family:宋体;">平台代码覆盖率测试</span><span lang="en-US" style="font-family:'Lucida Console';">-</span><span lang="en-US" style="font-family:宋体;">编译过程自动化及对链接的解释</span></a><span lang="zh-CN" style="font-family:宋体;">、</span><a href="http://blog.csdn.net/livelylittlefish/article/details/6143559"><span lang="zh-CN" style="font-family:'Lucida Console';">Linux</span><span lang="zh-CN" style="font-family:宋体;">平台如何编译使用</span><span lang="en-US" style="font-family:'Lucida Console';">Google test</span><span lang="en-US" style="font-family:宋体;">写的单元测试？</span></a><span lang="zh-CN" style="font-family:宋体;">。我们要做的是学习这种编译工程的方法，针对该例子，笔者编写的</span><span lang="en-US" style="font-family:'Lucida Console';">makefile</span><span lang="zh-CN" style="font-family:宋体;">文件如下。——这便是本节的主要目的。</span></p><pre class="plain" name="code">CXX = gcc
CXXFLAGS += -g -Wall -Wextra

NGX_ROOT = /usr/src/nginx-1.0.4

TARGETS = ngx_pool_t_test
TARGETS_C_FILE = $(TARGETS).c

CLEANUP = rm -f $(TARGETS) *.o

all: $(TARGETS)

clean:
	$(CLEANUP)

CORE_INCS = -I. \
	-I$(NGX_ROOT)/src/core \
	-I$(NGX_ROOT)/src/event \
	-I$(NGX_ROOT)/src/event/modules \
	-I$(NGX_ROOT)/src/os/unix \
	-I$(NGX_ROOT)/objs \

NGX_PALLOC = $(NGX_ROOT)/objs/src/core/ngx_palloc.o
NGX_STRING = $(NGX_ROOT)/objs/src/core/ngx_string.o
NGX_ALLOC = $(NGX_ROOT)/objs/src/os/unix/ngx_alloc.o

$(TARGETS): $(TARGETS_C_FILE)
	$(CXX) $(CXXFLAGS) $(CORE_INCS) $(NGX_PALLOC) $(NGX_STRING) $(NGX_ALLOC) $^ -o $@</pre><p><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">3.</span><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">3</span><span lang="en-US" style="font-family:宋体;FONT-WEIGHT: bold"> </span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">运行</span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold"><span lang="zh-CN" style="font-family:宋体;">运行结果</span></span></p><pre class="plain" name="code"># ./ngx_pool_t_test
--------------------------------
create a new pool:
--------------------------------
pool = 0x8922020
  .d
    .last = 0x8922048
    .end = 0x8922420
    .next = 0x0
    .failed = 0
  .max = 984
  .current = 0x8922020
  .chain = 0x0
  .large = 0x0
  .cleanup = 0x0
  .log = 0x0
available pool memory = 984

--------------------------------
alloc block 1 from the pool:
--------------------------------
pool = 0x8922020
  .d
    .last = 0x8922248
    .end = 0x8922420
    .next = 0x0
    .failed = 0
  .max = 984
  .current = 0x8922020
  .chain = 0x0
  .large = 0x0
  .cleanup = 0x0
  .log = 0x0
available pool memory = 472

--------------------------------
alloc block 2 from the pool:
--------------------------------
pool = 0x8922020
  .d
    .last = 0x8922248
    .end = 0x8922420
    .next = 0x8922450
    .failed = 0
  .max = 984
  .current = 0x8922020
  .chain = 0x0
  .large = 0x0
  .cleanup = 0x0
  .log = 0x0
available pool memory = 472

pool = 0x8922450
  .d
    .last = 0x8922660
    .end = 0x8922850
    .next = 0x0
    .failed = 0
  .max = 0
  .current = 0x0
  .chain = 0x0
  .large = 0x0
  .cleanup = 0x0
  .log = 0x0
available pool memory = 496

--------------------------------
alloc block 3 from the pool :
--------------------------------
pool = 0x8922020
  .d
    .last = 0x8922248
    .end = 0x8922420
    .next = 0x8922450
    .failed = 1
  .max = 984
  .current = 0x8922020
  .chain = 0x0
  .large = 0x0
  .cleanup = 0x0
  .log = 0x0
available pool memory = 472

pool = 0x8922450
  .d
    .last = 0x8922660
    .end = 0x8922850
    .next = 0x8922880
    .failed = 0
  .max = 0
  .current = 0x0
  .chain = 0x0
  .large = 0x0
  .cleanup = 0x0
  .log = 0x0
available pool memory = 496

pool = 0x8922880
  .d
    .last = 0x8922a90
    .end = 0x8922c80
    .next = 0x0
    .failed = 0
  .max = 0
  .current = 0x0
  .chain = 0x0
  .large = 0x0
  .cleanup = 0x0
  .log = 0x0
available pool memory = 496</pre><p><span lang="en-US" style="font-family:'Lucida Console';FONT-WEIGHT: bold">4. </span><span lang="zh-CN" style="font-family:宋体;FONT-WEIGHT: bold">小结</span></p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:宋体;">本文针对</span><span lang="en-US" style="font-family:'Lucida Console';">nginx-1.0.4</span><span lang="zh-CN" style="font-family:宋体;">的内存管理进行了较为全面的分析，包括相关内存池数据结构，内存池的创建、销毁，以及从内存池中分配内存等。最后通过一个简单例子向读者展示</span><span lang="en-US" style="font-family:'Lucida Console';">nginx</span><span lang="zh-CN" style="font-family:宋体;">内存池的创建和分配操作，同时借此向读者展示编译测试代码的方法。</span></p><p style="MARGIN: 0in; FONT-FAMILY: 宋体; FONT-SIZE: 10pt">&nbsp;</p><p style="MARGIN: 0in; FONT-SIZE: 10pt"><span lang="zh-CN" style="font-family:宋体;">分析完</span><span lang="en-US" style="font-family:'Lucida Console';">nginx</span><span lang="zh-CN" style="font-family:宋体;">的内存管理，你一定惊叹于</span><span lang="en-US" style="font-family:'Lucida Console';">nginx</span><span lang="zh-CN" style="font-family:宋体;">作者的聪明才智。这种内存管理的设计方法小巧、快捷，值得借鉴！</span></p><p>5. 致谢</p><p>写作本文，笔者参考了Reference里yixiao的<a href="http://www.tbdata.org/archives/1390">Nginx源码分析-内存池</a>和RainX1982的<a href="http://code.google.com/p/nginxsrp/wiki/NginxCodeReview">Nginx代码研究计划</a>。在此给予他们诚挚的感谢！</p><p>Reference</p><p>man posix_memalign (manual页)(Allocate aligned memory)</p><p>man getpagesize (manual页)(Get memory page size)</p><p><a href="http://www.tbdata.org/archives/1390">Nginx源码分析-内存池</a> (yixiao)</p><p><a href="http://code.google.com/p/nginxsrp/wiki/NginxCodeReview">Nginx代码研究计划</a> (RainX1982)</p><p>&nbsp;</p><p>Appendix: posix_memalign</p><p>&nbsp;</p><p><span style="BACKGROUND: silver">The&nbsp; </span>function&nbsp; posix_memalign()&nbsp; allocates&nbsp; size&nbsp; bytes and places the<span style="BACKGROUND: silver">address of the allocated memory in</span><span style="BACKGROUND: silver">*memptr.&nbsp; </span>The address of the allocated memory will be a multiple of alignment, which must be a&nbsp; power&nbsp; of<span style="BACKGROUND: silver">two and a multiple of sizeof(void *).</span></p><p>&nbsp;</p><p><span style="BACKGROUND: silver">the memory is not zeroed.</span></p><p><span style="BACKGROUND: silver">posix_memalign() returns zero on success, or one of the error values listed in the next section on&nbsp; </span>failure.&nbsp; Note that errno is not set.</p>   
</div>




<!-- Baidu Button BEGIN -->




<div class="bdsharebuttonbox tracking-ad" style="float: right;" data-mod="popu_172">
<a href="#" class="bds_more" data-cmd="more" style="background-position:0 0 !important; background-image: url(http://bdimg.share.baidu.com/static/api/img/share/icons_0_16.png?v=d754dcc0.png) !important"></a>
<a href="#" class="bds_qzone" data-cmd="qzone" title="分享到QQ空间"  style="background-position:0 -52px !important"></a>
<a href="#" class="bds_tsina" data-cmd="tsina" title="分享到新浪微博"style="background-position:0 -104px !important"></a>
<a href="#" class="bds_tqq" data-cmd="tqq" title="分享到腾讯微博"style="background-position:0 -260px !important"></a>
<a href="#" class="bds_renren" data-cmd="renren" title="分享到人人网"style="background-position:0 -208px !important"></a>
<a href="#" class="bds_weixin" data-cmd="weixin" title="分享到微信"style="background-position:0 -1612px !important" ></a>
</div>
<script>window._bd_share_config = { "common": { "bdSnsKey": {}, "bdText": "", "bdMini": "1", "bdMiniList": false, "bdPic": "", "bdStyle": "0", "bdSize": "16" }, "share": {} }; with (document) 0[(getElementsByTagName('head')[0] || body).appendChild(createElement('script')).src = 'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=' + ~(-new Date() / 36e5)];</script>
<!-- Baidu Button END -->

   <link rel="stylesheet" href="http://static.blog.csdn.net/css/blog_detail.css" />

    
<!--172.16.140.15-->

<!-- Baidu Button BEGIN -->
<script type="text/javascript" id="bdshare_js" data="type=tools&amp;uid=1536434" ></script>
<script type="text/javascript" id="bdshell_js"></script>
<script type="text/javascript">
    document.getElementById("bdshell_js").src = "http://bdimg.share.baidu.com/static/js/shell_v2.js?cdnversion=" + Math.ceil(new Date()/3600000)
</script>
<!-- Baidu Button END -->

 


        <div id="digg" ArticleId="6586946" >
            <dl id="btnDigg" class="digg digg_disable"  onclick="btndigga();">
               
                 <dt>顶</dt>
                <dd>79</dd>
            </dl>
           
              
            <dl id="btnBury" class="digg digg_disable"  onclick="btnburya();">
              
                  <dt>踩</dt>
                <dd>0</dd>               
            </dl>
            
        </div>
     <div class="tracking-ad" data-mod="popu_222"><a href="javascript:void(0);" >&nbsp;</a>   </div>
    <div class="tracking-ad" data-mod="popu_223"> <a href="javascript:void(0);" >&nbsp;</a></div>
    <script type="text/javascript">
                function btndigga() {
                    $(".tracking-ad[data-mod='popu_222'] a").click();
                }
                function btnburya() {
                    $(".tracking-ad[data-mod='popu_223'] a").click();
                }
            </script>

   <ul class="article_next_prev">
                <li class="prev_article"><span  onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_shangyipian']);location.href='/livelylittlefish/article/details/6571497';">上一篇</span><a href="/livelylittlefish/article/details/6571497" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_shangyipian'])">nginx源码分析—模块及其初始化</a></li>
                <li class="next_article"><span onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_xiayipian']);location.href='/livelylittlefish/article/details/6599056';">下一篇</span><a href="/livelylittlefish/article/details/6599056" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_xiayipian'])">nginx源码分析—数组结构ngx_array_t</a></li>
    </ul>

    <div style="clear:both; height:10px;"></div>


        <div class="similar_article"  style="display:none">
                <h4>我的同类文章</h4>
                <div class="similar_c"style="margin:20px 0px 0px 0px">
                    <div class="similar_c_t">
                                <label class="similar_cur">
                                    <span  style="cursor:pointer"  onclick="GetCategoryArticles('838107','livelylittlefish','foot','6586946');">高性能服务器<em>（11）</em></span>
                                </label>
                    </div>
                   
                    <div class="similar_wrap tracking-ad" data-mod="popu_141"  style="max-height:195px;">
                        <a href="http://blog.csdn.net" style="display:none">http://blog.csdn.net</a>
                        <ul class="similar_list fl">                          
                        </ul>

                        <ul class="similar_list fr">                           
                        </ul>
                    </div>
                </div>
            </div>    
    <script  type="text/javascript">
        $(function () {
            GetCategoryArticles('838107', 'livelylittlefish','foot','6586946');
        });
    </script>
      
</div>

    <div>
            <script type="text/javascript">
                /*博客内容页下方Banner1-728*90，创建于2016-12-13*/
                var cpro_id = "u2843949";
            </script>
            <script type="text/javascript" src="http://cpro.baidustatic.com/cpro/ui/c.js"></script>
     </div>

<div id="suggest"></div>
         <script  language="javascript" type='text/javascript'>     
             $(function(){
                 $.get("/livelylittlefish/svc/GetSuggestContent/6586946",function(data){
                     $("#suggest").html(data);
                 });     
             });             
         </script>  


<style>
.blog-ass-articl dd {
color: #369;
width: 99%; /*修改行*/
float: left;
overflow: hidden;
font: normal normal 12px/23px "SimSun";
height: 23px;
margin: 0;
padding: 0 0 0 10px;
margin-right: 30px;
background: url(http://static.blog.csdn.net/skin/default/images/blog-dot-red3.gif) no-repeat 0 10px;
}
</style>

 <link rel="stylesheet" href="http://static.blog.csdn.net/css/replace.css"/>
<div id="relate" data-mod="popu_218"  class="tracking-ad">
        <div class="relate_t">
            <h3><span>参考知识库</span></h3>
        </div>
        <div class="relate_c">
        </div>
</div>
 

<dl class="blog-ass-articl" id="res-relatived" > 
    <div class="embody embody_b" id="libkeyparent"  style="display:none">
            <span class="embody_t">更多资料请参考：</span>
            <div class="embody_c" id="libkey"></div>
    </div>


     <dt><span>猜你在找</span></dt>    


   


    <div id="adCollege" style="width: 42%;float: left;"> 
        <script src="http://csdnimg.cn/jobreco/job_reco.js" type="text/javascript"></script> 
        <script type="text/javascript">
            csdn.position.showEdu({
                sourceType: "blog",
                searchType: "detail",
                searchKey: "6586946",
                username: "",
                recordcount: "5",
                containerId: "adCollege" //容器DIV的id。 
            });
        </script> 
    </div>  

    
     <div id="res"  data-mod="popu_36"  class="tracking-ad" style="width: 42%;float: left;margin-right: 30px;"></div>
   
</dl>


<script type="text/javascript">
    $(function () {
        setTimeout(function () {
            var searchtitletags = 'nginx源码分析—内存池结构ngx_pool_t及内存管理' + ',' + $("#tags").html();
            searchService({
                index: 'blog',
                query: searchtitletags,
                from: 5,
                size: 5,
                appendTo: '#res',
                url: 'recommend',
                his: 2,
                client: "blog_cf_enhance",
                tmpl: '<dd style="background:url(http://static.blog.csdn.net/skin/default/images/blog-dot-red3.gif) no-repeat 0 10px;"><a href="#{ url }" title="#{ title }" strategy="#{ strategy }">#{ title }</a></dd>'
            });
        }, 500);
    });    

 </script>  


    <div id="ad_cen">        
                    <script type="text/javascript">
                        /*博客内容页下方Banner-728*90，创建于2014-7-3*/
                        var cpro_id = "u1607657";
                    </script>
                    <script type="text/javascript" src="http://cpro.baidustatic.com/cpro/ui/c.js"></script>
    </div>  


<div class="comment_class">
    <div id="comment_title" class="panel_head">
        <span class="see_comment">查看评论</span><a name="comments"></a></div>
    <div id="comment_list">
    </div>
    <div id="comment_bar">
    </div>
    <div id="comment_form">
    </div>
    <div class="announce">
        * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场<a name="reply"></a><a name="quote"></a></div>
</div>

<script type="text/javascript">
    var fileName = '6586946';
    var commentscount = 40;
    var islock = false
</script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/comment.js"></script>
    <div id="ad_bot">
    </div>
<div id="report_dialog">
</div>

<div id="d-top"  style="bottom:60px;">

        <a id="quick-reply" class="btn btn-top q-reply" title="快速回复" style="display:none;">
            <img src="http://static.blog.csdn.net/images/blog-icon-reply.png" alt="快速回复">
        </a>    
    <a id="d-top-a" class="btn btn-top backtop"  style="display: none;" title="返回顶部" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_huidaodingbu'])" style="">         
         <img src="http://static.blog.csdn.net/images/top.png" alt="TOP">
    </a>
</div>
<script type="text/javascript">
    $(function ()
    {
        $("#ad_frm_0").height("90px");
        
        setTimeout(function(){
            $("#ad_frm_2").height("200px");
        },1000);    
    });
  
</script>
<style type="text/css">
    .tag_list
    {
        background: none repeat scroll 0 0 #FFFFFF;
        border: 1px solid #D7CBC1;
        color: #000000;
        font-size: 12px;
        line-height: 20px;
        list-style: none outside none;
        margin: 10px 2% 0 1%;
        padding: 1px;
    }
    .tag_list h5
    {
        background: none repeat scroll 0 0 #E0DBD3;
        color: #47381C;
        font-size: 12px;
        height: 24px;
        line-height: 24px;
        padding: 0 5px;
        margin: 0;
    }
    .tag_list h5 a
    {
        color: #47381C;
    }
    .classify
    {
        margin: 10px 0;
        padding: 4px 12px 8px;
    }
    .classify a
    {
        margin-right: 20px;
        white-space: nowrap;
    }
</style>


<div class="tag_list" style="display:none"></div>
  <script  language="javascript" type='text/javascript'>     
      $(function(){
              setTimeout(function(){
                  $.get("/livelylittlefish/svc/GetTagContent",function(data){
                      $(".tag_list").html(data).show();
                  });     
              });
          },500);                       
 </script> 


<div id="pop_win" style="display:none ;position: absolute; z-index: 10000; border: 1px solid rgb(220, 220, 220); top: 222.5px; left: 630px; opacity: 1; background: none 0px 0px repeat scroll rgb(255, 255, 255);">
    
</div>
<div id="popup_mask"></div>
<style>
    #popup_mask
    {
        position: absolute;
        width: 100%;
        height: 100%;
        background: #000;
        z-index: 9999;
        left: 0px;
        top: 0px;
        opacity: 0.3;
        filter: alpha(opacity=30);
        display: none;
    }

</style>




<script type="text/javascript">
    $(function(){
        setTimeout(function(){
            $(".comment_body:contains('回复')").each(function(index,item){
                var u=$(this).text().split('：')[0].toString().replace("回复","")
                var thisComment=$(this);
                if(u)
                {
                    $.getJSON("https://passport.csdn.net/get/nick?callback=?", {users: u}, function(a) {
                        if(a!=null&&a.data!=null&&a.data.length>0)
                        {
                            nick=a.data[0].n; 
                            if(u!=nick)
                            {
                                thisComment.text(thisComment.text().replace(u,nick));  
                            }
                        }       
                    });  
                }
            });         

        },200);  

        setTimeout(function(){
            $(".math").each(function(index,value){$(this).find("span").last().css("color","#fff"); })
        },5000);

        setTimeout(function(){
            $(".math").each(function(index,value){$(this).find("span").last().css("color","#fff"); })
        },10000);

        setTimeout(function(){
            $(".math").each(function(index,value){$(this).find("span").last().css("color","#fff"); })
        },15000);
        
        setTimeout(function(){
            $("a img[src='http://js.tongji.linezing.com/stats.gif']").parent().css({"position":"absolute","left":"50%"});
        },300);
    });

    function loginbox(){
        var $logpop=$("#pop_win");
        $logpop.html('<iframe src="https://passport.csdn.net/account/loginbox?service=http://static.blog.csdn.net/callback.htm" frameborder="0" height="600" width="400" scrolling="no"></iframe>');

        $('#popup_mask').css({
            opacity: 0.5,
            width: $( document ).width() + 'px',
            height:  $( document ).height() + 'px'
        });
        $('#popup_mask').css("display","block");
 
        $logpop.css( {
            top: ($( window ).height() - $logpop.height())/ 2  + $( window 
       ).scrollTop() + 'px',
            left:($( window ).width() - $logpop.width())/ 2
        } );
 
        setTimeout( function () {
            $logpop.show();
            $logpop.css( {
                opacity: 1
            } );
        }, 200 );
 
        $('#popup_mask').unbind("click");
        $('#popup_mask').bind("click", function(){
            $('#popup_mask').hide();
            var $clopop = $("#pop_win");
            $("#common_ask_div_sc").css("display","none");
            $clopop.css( {
                opacity: 0
            } );
            setTimeout( function () {
                $clopop.hide();
            }, 350 );
            return false;
        });
    }   

</script>
 <script language="javascript" type="text/javascript" src="http://ads.csdn.net/js/async_new.js"></script>      




                        <div class="clear">
                        </div>
                    </div>                   
                
            </div>
                   
           <div id="side">
               
    <div class="side">
<div id="panel_Profile" class="panel">
<ul class="panel_head"><span>个人资料</span></ul>
<ul class="panel_body profile">
<div id="blog_userface">
    <a href="http://my.csdn.net/livelylittlefish" target="_blank">
    <img src="http://avatar.csdn.net/1/1/E/1_livelylittlefish.jpg" title="访问我的空间" style="max-width:90%"/>
    </a>
    <br />
    <span><a href="http://my.csdn.net/livelylittlefish" class="user_name" target="_blank">livelylittlefish</a></span>
</div>
<div class="interact">

    <a href="javascript:void(0);" class="attent" id="span_add_follow" title="[加关注]"></a>

 <a href="javascript:void(0);" class="letter"  title="[发私信]" onclick="window.open('http://msg.csdn.net/letters/model?receiver=livelylittlefish','_blank','height=350,width=700');_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_sixin'])"></a>  
</div>
<div id="blog_medal">
                       <div class="ico_expert"  onclick="javascript:location='http://blog.csdn.net/experts/rule.html'" title="CSDN认证专家" style="cursor:pointer;width:60px;height:60px;background:url('http://c.csdnimg.cn/jifen/images/xunzhang/xunzhang/bokezhuanjiamiddle.png') no-repeat" ></div>
                <div id="bms_box">
                                            <a  target="_blank">
                                                    <img src="http://c.csdnimg.cn/jifen/images/xunzhang/xunzhang/zhuanlandaren.png" onmouseover="m_over_m(this,2)" onmouseout="m_out_m()" alt="1" >
                                            </a>
               </div>
</div>
<ul id="blog_rank">
    <li>访问：<span>1051495次</span></li>
    <li>积分：<span>12431</span> </li>    
    <li >等级： <span style="position:relative;display:inline-block;z-index:1" >
            <img src="http://c.csdnimg.cn/jifen/images/xunzhang/jianzhang/blog7.png" alt="" style="vertical-align: middle;" id="leveImg">
            <div id="smallTittle" style=" position: absolute;  left: -24px;  top: 25px;  text-align: center;  width: 101px;  height: 32px;  background-color: #fff;  line-height: 32px;  border: 2px #DDDDDD solid;  box-shadow: 0px 2px 2px rgba (0,0,0,0.1);  display: none;   z-index: 999;">
            <div style="left: 42%;  top: -8px;  position: absolute;  width: 0;  height: 0;  border-left: 10px solid transparent;  border-right: 10px solid transparent;  border-bottom: 8px solid #EAEAEA;"></div>
            积分：12431 </div>
        </span>  </li>
    <li>排名：<span>第849名</span></li>
</ul>
<ul id="blog_statistics">
    <li>原创：<span>177篇</span></li>
    <li>转载：<span>4篇</span></li>
    <li>译文：<span>3篇</span></li>
    <li>评论：<span>479条</span></li>
</ul>
</ul>
</div>




<div id="custom_column_6633141" class="panel">
<ul class="panel_head"><span>公告</span></ul>
<ul class="panel_body">
<font color="#0000ff">本博客长期专注软件开发基本功，Linux平台基础开源软件分析、研究。<br><br><a href="https://github.com/abo321"><u><font color="#0000ff">My code @Github</font></u></a><br><br><a href="http://iask.sina.com.cn/u/ish?uid=1453665140"><u><font color="#0000ff">My technology writings @sina</font></u></a><br><br>本博客贴出的文章均为作者精心设计、思考、实践、写作而成。<br><br>版权所有，本人对本博客内所有内容享有版权及著作权。<br><br>本博客内任何内容仅供学习、研究使用！网络转载，请以链接形式注明出处！<br><br>严禁用于任何商业目的，违者将保留追究法律责任的权利！</font>
</ul>
</div><div class="panel" id="panel_Search">
    <ul class="panel_head"><span>文章搜索</span></ul>
    <ul class="panel_body">
        <form id="frmSearch" action="http://so.csdn.net/search" class="form_search" target="_blank">
        <span><input id="inputSearch" type="text" class="blogsearch" title="请输入关键字" /></span>
        <input id="btnSubmit" type="button" value="搜索" title="search in blog" />
        <input type="hidden" name="q" id="inputQ" />
        <input type="hidden" name="t" value="blog" />
        <a id="btnSearchBlog" target="_blank"></a>
        </form>
    </ul>
</div>

<script type="text/javascript">
    $(function () {
        $("#btnSubmit").click(function () {           
            search();
        });

        $("#frmSearch").submit(function () {
            search();
            return false;
        });

        function search()
        {
            var url = "http://so.csdn.net/so/search/s.do?q=" + encodeURIComponent($("#inputSearch").val()) + "&u=" + username + "&t=blog";
            window.location.href = url;
        }   
    });
</script><div id="panel_Archive" class="panel">
<ul class="panel_head"><span>文章存档</span></ul>
<ul class="panel_body">
<div id="archive_list">
<!--归档统计-->
<li><a href="/livelylittlefish/article/month/2014/03">2014年03月</a><span>(1)</span></li><li><a href="/livelylittlefish/article/month/2013/08">2013年08月</a><span>(1)</span></li><li><a href="/livelylittlefish/article/month/2012/10">2012年10月</a><span>(1)</span></li><li><a href="/livelylittlefish/article/month/2012/09">2012年09月</a><span>(2)</span></li><li><a href="/livelylittlefish/article/month/2012/08">2012年08月</a><span>(1)</span></li><li><a href="/livelylittlefish/article/month/2012/02">2012年02月</a><span>(6)</span></li><li><a href="/livelylittlefish/article/month/2011/08">2011年08月</a><span>(4)</span></li><li><a href="/livelylittlefish/article/month/2011/07">2011年07月</a><span>(5)</span></li><li><a href="/livelylittlefish/article/month/2011/06">2011年06月</a><span>(12)</span></li><li><a href="/livelylittlefish/article/month/2011/05">2011年05月</a><span>(9)</span></li><li><a href="/livelylittlefish/article/month/2011/04">2011年04月</a><span>(9)</span></li><li><a href="/livelylittlefish/article/month/2011/01">2011年01月</a><span>(6)</span></li><li><a href="/livelylittlefish/article/month/2010/12">2010年12月</a><span>(17)</span></li><li><a href="/livelylittlefish/article/month/2010/08">2010年08月</a><span>(2)</span></li><li><a href="/livelylittlefish/article/month/2010/07">2010年07月</a><span>(5)</span></li><li><a href="/livelylittlefish/article/month/2010/05">2010年05月</a><span>(1)</span></li><li><a href="/livelylittlefish/article/month/2009/12">2009年12月</a><span>(7)</span></li><li><a href="/livelylittlefish/article/month/2009/08">2009年08月</a><span>(11)</span></li><li><a href="/livelylittlefish/article/month/2009/07">2009年07月</a><span>(1)</span></li><li><a href="/livelylittlefish/article/month/2009/06">2009年06月</a><span>(5)</span></li><li><a href="/livelylittlefish/article/month/2009/04">2009年04月</a><span>(1)</span></li><li><a href="/livelylittlefish/article/month/2009/01">2009年01月</a><span>(3)</span></li><li><a href="/livelylittlefish/article/month/2008/12">2008年12月</a><span>(1)</span></li><li><a href="/livelylittlefish/article/month/2008/11">2008年11月</a><span>(4)</span></li><li><a href="/livelylittlefish/article/month/2008/09">2008年09月</a><span>(1)</span></li><li><a href="/livelylittlefish/article/month/2008/08">2008年08月</a><span>(3)</span></li><li><a href="/livelylittlefish/article/month/2008/07">2008年07月</a><span>(2)</span></li><li><a href="/livelylittlefish/article/month/2008/06">2008年06月</a><span>(5)</span></li><li><a href="/livelylittlefish/article/month/2008/05">2008年05月</a><span>(4)</span></li><li><a href="/livelylittlefish/article/month/2008/04">2008年04月</a><span>(1)</span></li><li><a href="/livelylittlefish/article/month/2008/03">2008年03月</a><span>(24)</span></li><li><a href="/livelylittlefish/article/month/2008/02">2008年02月</a><span>(26)</span></li><li><a href="/livelylittlefish/article/month/2005/01">2005年01月</a><span>(4)</span></li>
</div>
</ul>
</div>
<div id="homepageArticles" class="panel tracking-ad" data-mod="popu_4">
<ul class="panel_head"><span>推荐文章</span></ul>
<ul class="panel_body" id="ad_commend">
<ul>
<li><a href="http://blog.csdn.net/laoyang360/article/details/53843771" target="_blank">* 而立之年——三线城市程序员的年终告白</a></li>
<li><a href="http://blog.csdn.net/sdkfjksf/article/details/54380659" 
target="_blank">* Java集合框架中隐藏的设计套路</a></li>
<li><a href="http://blog.csdn.net/jiangwei0910410003/article/details/54092364" 
target="_blank">* Python脚本下载今日头条视频(附加Android版本辅助下载器)</a></li>
<li><a href="http://blog.csdn.net/caowenbin/article/details/54406716" target="_blank">* 人工智能的冷思考</a></li>
<li><a href="http://blog.csdn.net/it_talk/article/details/54346566" 
target="_blank">* React Native 实战系列教程之热更新原理分析与实现</a></li>


</ul></ul>
</div>


<div id="panel_Category" class="panel">
    <ul class="panel_head"><span>博客专栏</span></ul>
    <ul class="panel_body" id="sp_column">
    <table cellpadding="0" cellspacing="0"><tr>
    <td style="padding:10px 10px 0 0;">
    <a href="http://blog.csdn.net/column/details/mathematics.html" target="_blank"><img src="http://img.blog.csdn.net/20151123174938349" style="width:75px;height:75px;" /></a>
    </td>
    <td style="padding:10px 0; vertical-align:top;">
    <a href="http://blog.csdn.net/column/details/mathematics.html" target="_blank">砝码分盐问题</a>
    <p>文章：11篇</p>
    <span>阅读：31427</span>
    </td>
    </tr></table>
    </ul>
</div><div id="hotarticls" class="panel">
<ul class="panel_head">
    <span>       
阅读排行    </span>
</ul>

<ul class="panel_body itemlist">
<li>
<a href="/livelylittlefish/article/details/2186206" title="经典算法（2）——0/1背包问题（动态规划法）">经典算法（2）——0/1背包问题（动态规划法）</a><span>(53826)</span>
</li>
<li>
<a href="/livelylittlefish/article/details/6607324" title="nginx源码分析—队列结构ngx_queue_t">nginx源码分析—队列结构ngx_queue_t</a><span>(50511)</span>
</li>
<li>
<a href="/livelylittlefish/article/details/6571497" title="nginx源码分析—模块及其初始化">nginx源码分析—模块及其初始化</a><span>(35997)</span>
</li>
<li>
<a href="/livelylittlefish/article/details/7243718" title="nginx源码分析—启动流程">nginx源码分析—启动流程</a><span>(27843)</span>
</li>
<li>
<a href="/livelylittlefish/article/details/6586946" title="nginx源码分析—内存池结构ngx_pool_t及内存管理">nginx源码分析—内存池结构ngx_pool_t及内存管理</a><span>(25005)</span>
</li>
<li>
<a href="/livelylittlefish/article/details/6448885" title="GCC Coverage代码分析-.gcda/.gcno文件及其格式分析">GCC Coverage代码分析-.gcda/.gcno文件及其格式分析</a><span>(23938)</span>
</li>
<li>
<a href="/livelylittlefish/article/details/2423764" title="C#——Marshal.StructureToPtr方法简介">C#——Marshal.StructureToPtr方法简介</a><span>(23615)</span>
</li>
<li>
<a href="/livelylittlefish/article/details/3854220" title="编写Makefile">编写Makefile</a><span>(23377)</span>
</li>
<li>
<a href="/livelylittlefish/article/details/2186175" title="C++学习笔记（16）——动态二维数组的分配与释放">C++学习笔记（16）——动态二维数组的分配与释放</a><span>(22952)</span>
</li>
<li>
<a href="/livelylittlefish/article/details/7247080" title="nginx源码分析—全局变量ngx_cycle的初始化">nginx源码分析—全局变量ngx_cycle的初始化</a><span>(15415)</span>
</li>
</ul>
</div>
<div id="newcomments" class="panel">
<ul class="panel_head"><span>最新评论</span></ul>
<ul class="panel_body itemlist">
    <li>
   
         <a href="/livelylittlefish/article/details/6586946#comments">nginx源码分析—内存池结构ngx_pool_t及内存管理</a>
    <p style="margin:0px;"><a href="/hyw11002233" class="user_name">hyw11002233</a>:
@wanghaisheng:个人觉得并不会存在浪费的情况，您说的和max比较，是用来判断是否进行大块...
    </p>
    </li>
    <li>
   
         <a href="/livelylittlefish/article/details/6586946#comments">nginx源码分析—内存池结构ngx_pool_t及内存管理</a>
    <p style="margin:0px;"><a href="/wu5215080" class="user_name">wu5215080</a>:
您好，请教一下，最近也是在学nginx，看到网上有很多关于nginx内存管理的介绍，在这里由一个疑惑...
    </p>
    </li>
    <li>
   
         <a href="/livelylittlefish/article/details/6696717#comments">我在Salira的800天(2009.5.20~2011.7.29)-四．总结篇</a>
    <p style="margin:0px;"><a href="/qq_22821311" class="user_name">qq_22821311</a>:
博主的文章确实对我们这些刚毕业和准备毕业的人有很好的指导意义
    </p>
    </li>
    <li>
   
         <a href="/livelylittlefish/article/details/2209537#comments">经典算法（3）——最大间隙问题（线性时间算法）</a>
    <p style="margin:0px;"><a href="/Arkarin" class="user_name">Arkarin</a>:
很有帮助，算法这门课真是思维精妙
    </p>
    </li>
    <li>
   
         <a href="/livelylittlefish/article/details/6571497#comments">nginx源码分析—模块及其初始化</a>
    <p style="margin:0px;"><a href="/liangpeng2891" class="user_name">liangpeng2891</a>:
感谢楼主，辛苦了，小弟学习了。祝工作顺利，阖家幸福！
    </p>
    </li>
    <li>
   
         <a href="/livelylittlefish/article/details/6571497#comments">nginx源码分析—内存池结构ngx_pool_t及内存管理</a>
    <p style="margin:0px;"><a href="/qq_19079937" class="user_name">qq_19079937</a>:
楼主，你好！我有一个疑问，在ngx_palloc_block中，初始化new-&gt;d.last为p +...
    </p>
    </li>
    <li>
   
         <a href="/livelylittlefish/article/details/6571497#comments">nginx源码分析—内存池结构ngx_pool_t及内存管理</a>
    <p style="margin:0px;"><a href="/qq_19079937" class="user_name">qq_19079937</a>:
楼主，你好！我有一个疑问，在ngx_palloc_block中，初始化new-&gt;d.last为p +...
    </p>
    </li>
    <li>
   
         <a href="/livelylittlefish/article/details/7247080#comments">nginx源码分析—全局变量ngx_cycle的初始化</a>
    <p style="margin:0px;"><a href="/LB228988" class="user_name">LB228988</a>:
@abonege:我赞成你说的！
    </p>
    </li>
    <li>
   
         <a href="/livelylittlefish/article/details/6599056#comments">nginx源码分析—数组结构ngx_array_t</a>
    <p style="margin:0px;"><a href="/LB228988" class="user_name">LB228988</a>:
文章写的真不错！
    </p>
    </li>
    <li>
   
         <a href="/livelylittlefish/article/details/2138153#comments">一个数的三次方尾数是888，有什么规律吗？</a>
    <p style="margin:0px;"><a href="/a1b2c3d4123456" class="user_name">a1b2c3d4123456</a>:
感谢分享
    </p>
    </li>
</ul>
</div>
<div id="panel_Category" class="panel">
<ul class="panel_head"><span>文章分类</span></ul>
<ul class="panel_body">    
                 <li>
                    <a href="/livelylittlefish/article/category/533099" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">API编程</a><span>(1)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/91930" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">C++研究</a><span>(31)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/709593" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">重读经典</a><span>(5)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/92113" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">STL研究</a><span>(2)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/769623" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">Boost系列</a><span>(13)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/365009" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">算法研究</a><span>(37)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/826830" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">GCC系列</a><span>(8)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/670819" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">GDB系列</a><span>(3)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/670815" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">Linux编程系列</a><span>(3)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/834923" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">思维题目分析</a><span>(11)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/838107" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">高性能服务器</a><span>(12)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/1232383" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">POSIX多线程</a><span>(4)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/533764" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">底层研究</a><span>(6)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/777530" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">单元测试</a><span>(10)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/769232" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">Windows系列</a><span>(3)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/92109" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">基础知识</a><span>(7)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/772449" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">工作杂谈</a><span>(5)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/550818" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">网络协议</a><span>(5)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/509940" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">Linux管理配置</a><span>(10)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/391236" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">.net研究</a><span>(12)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/490429" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">自动构建</a><span>(4)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/91928" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">java研究</a><span>(1)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/670814" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">Linux命令系列</a><span>(1)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/411048" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">逆向分析</a><span>(1)</span>
                </li>
                 <li>
                    <a href="/livelylittlefish/article/category/6513195" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_wenzhangfenlei']); ">分布式系统</a><span>(0)</span>
                </li>
</ul>
</div>    </div>
    <div class="clear">
    </div>


                   <!-- 广告位开始 --> 
                    <ins data-revive-zoneid="190" data-revive-id="8c38e720de1c90a6f6ff52f3f89c4d57"></ins> 
                    <!-- 广告位结束 -->

           </div>   

            <div class="clear">
            </div>
        </div>

        

<script type="text/javascript" src="http://c.csdnimg.cn/rabbit/cnick/cnick.js"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/newblog.min.js"></script>


<script type="text/javascript" src="http://medal.blog.csdn.net/showblogmedal.ashx?blogid=54453"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/JavaScript1.js"></script>

    <script type="text/javascript" src="http://passport.csdn.net/content/loginbox/login.js"></script>
<script type="text/javascript">document.write("<img src=http://counter.csdn.net/pv.aspx?id=24 border=0 width=0 height=0>");</script>
<script type="text/javascript" src="http://www.csdn.net/ui/scripts/Csdn/counter.js"></script>
<script type="text/javascript" src="http://ad.csdn.net/scripts/ad-blog.js"></script>
<script type="text/javascript">
    $(function () {
        function __get_code_toolbar(snippet_id) {
            return $("<span class='tracking-ad' data-mod='popu_167'><a href='https://code.csdn.net/snippets/"
                    + snippet_id
                    + "' target='_blank' title='在CODE上查看代码片'  style='text-indent:0;'><img src='https://code.csdn.net/assets/CODE_ico.png' width=12 height=12 alt='在CODE上查看代码片' style='position:relative;top:1px;left:2px;'/></a></span>"
                    + "<span class='tracking-ad' data-mod='popu_170'><a href='https://code.csdn.net/snippets/"
                    + snippet_id
                    + "/fork' target='_blank' title='派生到我的代码片' style='text-indent:0;'><img src='https://code.csdn.net/assets/ico_fork.svg' width=12 height=12 alt='派生到我的代码片' style='position:relative;top:2px;left:2px;'/></a></span>");
        }
        
        $("[code_snippet_id]").each(function () {
            __s_id = $(this).attr("code_snippet_id");
            if (__s_id != null && __s_id != "" && __s_id != 0 && parseInt(__s_id) > 70020) {
                __code_tool = __get_code_toolbar(__s_id);
                $(this).prev().find(".tools").append(__code_tool);
            }
        });

        $(".bar").show();
    });
</script>





    </div>
      <!--new top-->
    
    <script id="csdn-toolbar-id" btnId="header_notice_num" wrapId="note1" count="5" subCount="5" type="text/javascript" src="http://c.csdnimg.cn/public/common/toolbar/js/toolbar.js"></script>     <!--new top-->
   
    <link href="http://c.csdnimg.cn/comm_ask/css/ask_float_block.css" type="text/css" rel="stylesheet" />
    <script language='JavaScript' type='text/javascript' src='http://c.csdnimg.cn/comm_ask/js/libs/wmd.js'></script>
    <script language='JavaScript' type='text/javascript' src='http://c.csdnimg.cn/comm_ask/js/libs/showdown.js'></script>
    <script language='JavaScript' type='text/javascript' src='http://c.csdnimg.cn/comm_ask/js/libs/prettify.js'></script>
    <script language='JavaScript' type='text/javascript' src='http://c.csdnimg.cn/comm_ask/js/apps/ask_float_block.js'></script>
   

   

  <div id="a52b5334d" style="width: 1px; height: 1px; display: none;">
                    <script id="adJs52b5334"></script>
                    <script>document.getElementById("adJs52b5334").src = "http://ads.csdn.net/js/opt/52b5334.js?t=" + Math.random();</script>
   </div>

    <link rel="stylesheet" href="http://static.blog.csdn.net/css/blog_code.css" />
    <script type="text/javascript" src="http://static.blog.csdn.net/scripts/saveToCode.js"></script>
      <script type="text/javascript" src="//csdnimg.cn/rabbit/tracking-ad/main.js?75eacd8"></script>

     <link rel="stylesheet" href="http://static.blog.csdn.net/css/fa.css" />

    <div class="pop_CA_cover"  style="display:none"></div>
    <div class="pop pop_CA"  style="display:none">
          <div class="CA_header">
            收藏助手
            <span class="cancel_icon"  id="fapancle"  onclick="$('.pop_CA').hide();$('.pop_CA_cover').hide();"></span>
          </div>
          <iframe src="" id="fa" frameborder="0" width="100%" height="360"  scrolling="no" />
    </div>
</body>
</html>   
 